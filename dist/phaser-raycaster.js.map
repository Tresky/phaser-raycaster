{"version":3,"sources":["webpack://PhaserRaycaster/webpack/universalModuleDefinition","webpack://PhaserRaycaster/webpack/bootstrap","webpack://PhaserRaycaster/./src/main.js","webpack://PhaserRaycaster/./src/map/boundingBox.js","webpack://PhaserRaycaster/./src/map/config.js","webpack://PhaserRaycaster/./src/map/map-circle-methods.js","webpack://PhaserRaycaster/./src/map/map-container-methods.js","webpack://PhaserRaycaster/./src/map/map-core.js","webpack://PhaserRaycaster/./src/map/map-line-methods.js","webpack://PhaserRaycaster/./src/map/map-matterBody-methods.js","webpack://PhaserRaycaster/./src/map/map-polygon-methods.js","webpack://PhaserRaycaster/./src/map/map-rectangle-methods.js","webpack://PhaserRaycaster/./src/map/map-tilemap-methods.js","webpack://PhaserRaycaster/./src/map/segmentsCount.js","webpack://PhaserRaycaster/./src/ray/angle.js","webpack://PhaserRaycaster/./src/ray/cast.js","webpack://PhaserRaycaster/./src/ray/castCircle.js","webpack://PhaserRaycaster/./src/ray/castCone.js","webpack://PhaserRaycaster/./src/ray/cone.js","webpack://PhaserRaycaster/./src/ray/config.js","webpack://PhaserRaycaster/./src/ray/debug.js","webpack://PhaserRaycaster/./src/ray/enablePhysics.js","webpack://PhaserRaycaster/./src/ray/matter-physics-methods.js","webpack://PhaserRaycaster/./src/ray/origin.js","webpack://PhaserRaycaster/./src/ray/overlap.js","webpack://PhaserRaycaster/./src/ray/range.js","webpack://PhaserRaycaster/./src/ray/ray-core.js","webpack://PhaserRaycaster/./src/ray/ray.js","webpack://PhaserRaycaster/./src/ray/slice.js","webpack://PhaserRaycaster/./src/ray/stats.js","webpack://PhaserRaycaster/./src/raycaster-core.js"],"names":["PhaserRaycaster","scene","systems","sys","settings","isBooted","events","once","boot","register","PluginManager","prototype","eventEmitter","on","start","preUpdate","update","postUpdate","pause","resume","sleep","wake","shutdown","destroy","test","name","console","log","time","delta","undefined","createRaycaster","options","_Raycaster","constructor","require","Raycaster","module","exports","getBoundingBox","object","getBounds","rectangle","line","polygon","arc","container","tilemap","matterBody","segmentCount","boundingBox","config","type","getPoints","getSegments","updateMap","circle","setSegmentCount","collisionTiles","setCollisionTiles","setOrigin","forceConvex","forceVerticesMapping","dynamic","active","ray","_points","length","points","offset","Phaser","Geom","Point","x","displayWidth","originX","y","displayHeight","originY","rayA","Line","rayB","c","rotation","vector","SetToAngle","Angle","Length","cB","getPointB","origin","rayLength","Math","sqrt","pow","radius","scaleX","angle","dAngle","asin","push","_segments","scaleY","geom","segments","newPoints","point","i","getCircles","tempRay","_raycaster","createRay","list","child","map","data","get","iterate","setDataEnabled","set","childPoints","segment","pointA","getPointA","pointB","vectorA","vectorB","bind","iLength","childA","mapA","j","jLength","childB","mapB","Intersects","RectangleToRectangle","segmentA","segmentB","intersection","LineToLine","Map","raycaster","body","circleRadius","position","scale","bodies","generateBounds","bounds","bodyItem","parts","vertices","find","segmentIndex","findIndex","x1","y1","x2","y2","splice","closingSegment","matter","composite","Rectangle","min","max","closePath","last","getTopLeft","getTopRight","getBottomRight","getBottomLeft","detectionRange","MAX_SAFE_INTEGER","Distance","Between","LineToCircle","detectionRangeCircle","horizontal","horizontals","verticals","layer","row","tile","upperEdge","includes","index","leftEdge","vertical","height","width","tileWidth","tileHeight","verticalsLastColumn","column","filter","horizontalSegment","tiles","count","setAngle","Normalize","_ray","rayRange","setAngleDeg","DegToRad","cast","closestIntersection","closestSegment","closestObject","closestDistance","internal","startTime","performance","now","stats","method","rays","testedMappedObjects","hitMappedObjects","intersections","GetLineToRectangle","distance","target","objects","mappedObjects","raycasterMap","_boundingBox","setTo","Equals","isTangent","circleIntersections","Circle","GetLineToCircle","_stats","result","ignoreNotIntersectedRays","round","drawDebug","castCircle","originalAngle","maps","rayTargets","testedObjects","boundsInRange","objectB","sort","a","b","previousTarget","castSides","roundedTarget","intersectionA","intersectionB","autoSlice","slicedIntersections","slice","castCone","cone","minAngle","maxAngle","angleOffset","coneDeg","angleOffsetDeg","RadToDeg","ShortestBetween","abs","setCone","setConeDeg","angleDeg","collisionRange","enablePhysics","debugOptions","enabled","graphics","add","lineStyle","color","fillStyle","setDepth","clear","strokeLineShape","rayPoint","fillPoint","collisionCircle","bodyType","gameObject","shape","centerX","centerY","label","isSensor","ignoreGravity","setOnCollideActive","physics","existing","setCircle","setAllowGravity","setImmovable","setCollisionCategory","value","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","Array","isArray","mask","setOnCollide","callback","self","onCollideCallback","collisionInfo","rayCollided","processOverlap","setOnCollideEnd","onCollideEndCallback","func","bodyA","bodyB","onCollideWith","id","onCollideActiveCallback","setOnCollideWith","src","hasOwnProperty","overlap","targets","overlapCircle","isCollisionInfo","query","collides","getMatterBodies","testMatterOverlap","overlapCirc","hitbox","isCircle","halfWidth","testArcadeOverlap","CircleToCircle","CircleToRectangle","object1","object2","obj1","obj2","TriangleToCircle","RectangleToTriangle","part","TriangleToLine","Triangle","ContainsPoint","setRayRange","setDetectionRange","setCollisionRange","oldRangeMax","setRadius","isStatic","objectBounds","Ray","getStats","setRay","closed","slices","version","mapPoint","mapSegment","mapBoundingBox","total","static","rectangleMaps","polygonMaps","circleMaps","lineMaps","containerMaps","tilemapMaps","matterMaps","sortedPoints","mapSegmentCount","world","walls","top","bottom","setOptions","autoUpdate","debug","Object","assign","mapGameObjects","setBoundingBox","left","right","option","removeMappedObjects","indexOf","enableMaps","disableMaps","dynamicMaps","mapppedObject","strokeRectShape"],"mappings":"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,IAAP,CAAY,IAAI9B,MAAM,CAACC,IAAP,CAAYC,KAAhB,CAAsBmE,YAAY,CAAClE,CAAb,GAAiB3B,SAAS,CAACkD,MAA3B,GAAoC3B,MAAM,CAACI,CAAjE,EAAoEkE,YAAY,CAAC/D,CAAb,GAAiB9B,SAAS,CAACkD,MAA3B,GAAoC3B,MAAM,CAACO,CAA/G,CAAZ;YACP;UAfmC;YAAA;UAAA;YAAA;UAAA;QAgBvC;MAxB8D;QAAA;MAAA;QAAA;MAAA;IAyBlE;EACJ;;EAED,KAAKV,OAAL,GAAeE,MAAf;EACA,KAAKiC,SAAL,GAAiBG,QAAjB;EAEA,OAAO,IAAP;AACH;AAAA,C;;;;;;;;;;;;AC7MD;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASqC,GAAT,CAAa7G,OAAb,EAAsB8G,SAAtB,EAAiC;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,KAAKhC,UAAL,GAAkBgC,SAAS,GAAGA,SAAH,GAAe,KAA1C;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAK1F,IAAL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKY,MAAL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKD,OAAL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKP,MAAL,GAAc,KAAd;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKhB,MAAL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAK0B,OAAL,GAAe,EAAf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKmC,SAAL,GAAiB,EAAjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKhD,SAAL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKC,WAAL;EACA;AACJ;AACA;A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GAAa,CAAb;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKiK,IAAL,GAAY,CAAZ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKvD,QAAL,GAAgBrI,MAAM,CAACsB,IAAP,CAAYkF,gBAA5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKD,cAAL,GAAsB,CAAtB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKK,oBAAL,GAA4B,IAAI5G,MAAM,CAACC,IAAP,CAAYiK,MAAhB,EAA5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKsC,cAAL,GAAsBxM,MAAM,CAACsB,IAAP,CAAYkF,gBAAlC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAK8D,wBAAL,GAAgC,IAAhC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKC,KAAL,GAAa,KAAb;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKiB,SAAL,GAAiB,KAAjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKlC,aAAL,GAAqB,EAArB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKmC,mBAAL,GAA2B,EAA3B;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAK8B,QAAL,GAAgB,KAAhB;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACI,KAAKnD,MAAL,GAAc;IACVlB,MAAM,EAAE,MADE;IAEVC,IAAI,EAAE,CAFI;IAGVC,mBAAmB,EAAE,CAHX;IAIVC,gBAAgB,EAAE,CAJR;IAKVnH,QAAQ,EAAE,CALA;IAMV5E,IAAI,EAAE;EANI,CAAd;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;EACK,K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","file":"phaser-raycaster.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"PhaserRaycaster\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserRaycaster\"] = factory();\n\telse\n\t\troot[\"PhaserRaycaster\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","var PhaserRaycaster = function (scene)\n{\n    //The Scene that owns this plugin\n    this.scene = scene;\n\n    this.systems = scene.sys;\n\n    if (!scene.sys.settings.isBooted)\n    {\n        scene.sys.events.once('boot', this.boot, this);\n    }\n};\n\n//Static function called by the PluginFile Loader.\nPhaserRaycaster.register = function (PluginManager)\n{\n    //  Register this plugin with the PluginManager, so it can be added to Scenes.\n\n    //  The first argument is the name this plugin will be known as in the PluginManager. It should not conflict with already registered plugins.\n    //  The second argument is a reference to the plugin object, which will be instantiated by the PluginManager when the Scene boots.\n    //  The third argument is the local mapping. This will make the plugin available under `this.sys.base` and also `this.base` from a Scene if\n    //  it has an entry in the InjectionMap.\n    PluginManager.register('PhaserRaycaster', PhaserRaycaster, 'base');\n};\n\nPhaserRaycaster.prototype = {\n\n    //  Called when the Plugin is booted by the PluginManager.\n    //  If you need to reference other systems in the Scene (like the Loader or DisplayList) then set-up those references now, not in the constructor.\n    boot: function ()\n    {\n        var eventEmitter = this.systems.events;\n\n        //  Listening to the following events is entirely optional, although we would recommend cleanly shutting down and destroying at least.\n        //  If you don't need any of these events then remove the listeners and the relevant methods too.\n\n        eventEmitter.on('start', this.start, this);\n\n        eventEmitter.on('preupdate', this.preUpdate, this);\n        eventEmitter.on('update', this.update, this);\n        eventEmitter.on('postupdate', this.postUpdate, this);\n\n        eventEmitter.on('pause', this.pause, this);\n        eventEmitter.on('resume', this.resume, this);\n\n        eventEmitter.on('sleep', this.sleep, this);\n        eventEmitter.on('wake', this.wake, this);\n\n        eventEmitter.on('shutdown', this.shutdown, this);\n        eventEmitter.on('destroy', this.destroy, this);\n    },\n\n    //A test method.\n    test: function (name)\n    {\n        console.log('RaycasterPlugin says hello ' + name + '!');\n    },\n\n    //Called when a Scene is started by the SceneManager. The Scene is now active, visible and running.\n    start: function ()\n    {\n    },\n\n    //Called every Scene step - phase 1\n    preUpdate: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 2\n    update: function (time, delta)\n    {\n    },\n\n    //Called every Scene step - phase 3\n    postUpdate: function (time, delta)\n    {\n    },\n\n    //Called when a Scene is paused. A paused scene doesn't have its Step run, but still renders.\n    pause: function ()\n    {\n    },\n\n    //Called when a Scene is resumed from a paused state.\n    resume: function ()\n    {\n    },\n\n    //Called when a Scene is put to sleep. A sleeping scene doesn't update or render, but isn't destroyed or shutdown. preUpdate events still fire.\n    sleep: function ()\n    {\n    },\n\n    //Called when a Scene is woken from a sleeping state.\n    wake: function ()\n    {\n    },\n\n    //Called when a Scene shuts down, it may then come back again later (which will invoke the 'start' event) but should be considered dormant.\n    shutdown: function ()\n    {\n    },\n\n    //Called when a Scene is destroyed by the Scene Manager. There is no coming back from a destroyed Scene, so clear up all resources here.\n    destroy: function ()\n    {\n        this.shutdown();\n\n        this.scene = undefined;\n    },\n\n    //Create Raycaster object\n    createRaycaster: function(options = {}) {\n        options.scene = this.scene;\n        return new this._Raycaster(options);\n    }\n\n};\n\nPhaserRaycaster.prototype.constructor = PhaserRaycaster;\nPhaserRaycaster.prototype._Raycaster = require('./raycaster-core.js').Raycaster;\n\n//Make sure you export the plugin for webpack to expose\n\nmodule.exports = PhaserRaycaster;\n","/**\n* Get mapped object's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Mapped object's bounding box.\n*/\nexport function getBoundingBox() {\n    return this.object.getBounds();\n}\n","let rectangle = require('./map-rectangle-methods.js');\nlet line = require('./map-line-methods.js');\nlet polygon = require('./map-polygon-methods.js');\nlet arc = require('./map-circle-methods.js');\nlet container = require('./map-container-methods.js');\nlet tilemap = require('./map-tilemap-methods.js');\nlet matterBody = require('./map-matterBody-methods.js');\nlet segmentCount = require('./segmentsCount.js');\nlet boundingBox = require('./boundingBox.js');\n\n/**\n * Configure map.\n *\n * @method Raycaster.Map#config\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Map's congfiguration options. May include:\n * @param {object} options.object - Game object to map\n * @param {string} [options.type] - Map type. If not defined, it will be determined based on object.\n * @param {boolean} [options.dynamic = false] - If set true, map will be dynamic (updated on scene update event).\n * @param {boolean} [options.active = true] - If set true, map will be active (will provide points, segments and will be updated).\n * @param {integer} [options.segmentCount] - Circle map's segment count. If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n * @param {boolean} [options.forceConvex] - If set true, matter body map will use convex body (hull) for non-covex bodies.\n * @param {boolean} [options.forceVerticesMapping] - If set true, matter body map will use only vertices for mapping circle bodies.\n * \n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //object type\n    if(options.type === undefined)\n        options.type = options.object.type;\n    if(options.type === 'body' || options.type === 'composite')\n        options.type = 'MatterBody';\n    this.type = options.type;\n    \n    switch(options.type) {\n        case 'Polygon':\n            this.getPoints = polygon.getPoints;\n            this.getSegments = polygon.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = polygon.updateMap;\n            break;\n        case 'Arc':\n            //circle segments count\n            this.segmentCount = (options.segmentCount) ? options.segmentCount : 0;\n            this.circle = (options.segmentCount) ? false : true;\n            this.getPoints = arc.getPoints;\n            this.getSegments = arc.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = arc.updateMap;\n            this.setSegmentCount = segmentCount.setSegmentCount;\n            break;\n        case 'Line':\n            this.getPoints = line.getPoints;\n            this.getSegments = line.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = line.updateMap;\n            break;\n        case 'Container':\n            this.getPoints = container.getPoints;\n            this.getSegments = container.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = container.updateMap;\n            break;\n        case 'StaticTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'DynamicTilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'TilemapLayer':\n            //ray colliding tiles\n            this.collisionTiles = (options.collisionTiles) ? options.collisionTiles : [];\n            this.getPoints = tilemap.getPoints;\n            this.getSegments = tilemap.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = tilemap.updateMap;\n            this.setCollisionTiles = tilemap.setCollisionTiles;\n            //reset tilemap origin\n            this.object.setOrigin(0,0);\n            break;\n        case 'MatterBody':\n            //force convex body (hull) mapping\n            this.forceConvex = (options.forceConvex) ? true : false;\n            //force mapping by vertices\n            this.forceVerticesMapping = (options.forceVerticesMapping) ? true : false;\n            this.circle = false;\n            this.getPoints = matterBody.getPoints;\n            this.getSegments = matterBody.getSegments;\n            this.getBoundingBox = matterBody.getBoundingBox;\n            this.updateMap = matterBody.updateMap;\n            break;\n        default:\n            this.getPoints = rectangle.getPoints;\n            this.getSegments = rectangle.getSegments;\n            this.getBoundingBox = boundingBox.getBoundingBox;\n            this.updateMap = rectangle.updateMap;\n    }\n\n    //dynamic map\n    this.dynamic = (options.dynamic == true) ? true : false;\n\n    //enable/disable map\n    this.active = (options.active !== undefined) ? options.active : true;\n\n    return this;\n}\n","/*Map methods for circles*/\n/**\n* Get array of mapped circle's vertices used as rays targets.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll calculatoe tangent points for passed ray.\n*\n* @method Raycaster.Map#arc.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    if(this._points.length > 0)\n        return this._points;\n    \n    let points = [];\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * (this.object.originX - 0.5);\n    offset.y = this.object.y - this.object.displayHeight * (this.object.originY - 0.5);\n\n    //calculate tangent rays\n    if(ray) {\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c;\n        \n        let rotation = this.object.rotation;\n        \n        if(rotation !== 0) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, offset.x, offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            let cB = vector.getPointB();\n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, cB.x, cB.y);\n        }\n        else { \n            c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, offset.x, offset.y);\n        }\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(this.object.radius * this.object.scaleX, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((this.object.radius * this.object.scaleX) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped circle's segments used to test object's intersection with ray.\n* If {@link Raycaster.Map#segmentCount Raycaster.Map#segmentCount} is set to 0, it'll return empty array.\n*\n* @method Raycaster.Map#arc.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update circles's map of points and segments.\n*\n* @method Raycaster.Map#arc.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    if(!this.segmentCount) {\n        this._points = [];\n        this._segments = [];\n        return this;\n    }\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX + this.object.radius * this.object.scaleX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY + this.object.radius * this.object.scaleY;\n\n    //get points surrounding circle\n    let points = this.object.geom.getPoints(this.segmentCount);\n    let segments = []\n\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let newPoints = [];\n        for(let point of points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, this.object.x + (point.x + this.object.radius) * this.object.scaleX, this.object.y + (point.y + this.object.radius) * this.object.scaleY);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            newPoints.push(vector.getPointB());\n        }\n        points = newPoints;\n    }\n    //if rotation === 0\n    else {\n        for(let point of points) {\n            point.x = point.x * this.object.scaleX + offset.x;\n            point.y = point.y * this.object.scaleY + offset.y;\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for containers*/\n/**\n* Get array of mapped container's and its children vertices used as rays targets.\n*\n* @method Raycaster.Map#container.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false, getCircles = false) {\n    if(!this.active)\n        return [];\n\n    let points = [];\n    if(!getCircles)\n        points = this._points;\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    //get tangent points of container's circles\n    if(ray){\n        //create temporary ray\n        let vector = new Phaser.Geom.Line(0, 0, ray.origin.x - offset.x, ray.origin.y - offset.y);\n        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) - this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n        let tempRay = ray._raycaster.createRay({\n            origin: {\n                x: vector.getPointB().x,\n                y: vector.getPointB().y\n            }\n        });\n\n        for(let child of this.object.list){\n            if(child.type === 'Arc'){\n\n                let map = child.data.get('raycasterMap');\n                if(map._points.length == 0){\n                    for(let point of map.getPoints(tempRay, true)){\n                        let vector = new Phaser.Geom.Line(0, 0, point.x, point.y);\n                        Phaser.Geom.Line.SetToAngle(vector, 0, 0, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n\n                        points.push(new Phaser.Geom.Point(vector.getPointB().x + offset.x, vector.getPointB().y + offset.y));\n                    }\n                }\n            }\n            else if(child.type === 'Container') {\n                for(let point of child.data.get('raycasterMap').getPoints(tempRay, true)){\n                    if(this.object.rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + this.object.rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleX + offset.y));\n                }\n            }\n\n        }\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped container's and its children segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#container.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n\n    return this._segments;\n};\n\n/**\n* Update container's and its children maps of points and segments.\n*\n* @method Raycaster.Map#container.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.1\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let container = this.object;\n\n    //calculate offset based on container position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n\n    let rotation = container.rotation;\n\n    //iterate through container's children\n    container.iterate(function(child){\n        if(!child.data)\n            child.setDataEnabled();\n\n        //get child map\n        let map = child.data.get('raycasterMap');\n        if(!map) {\n            map = new this.constructor({\n                object: child,\n                segmentCount: this.segmentCount\n            });\n            child.data.set('raycasterMap', map);\n        }\n        else\n            map.updateMap();\n\n        //add child points\n        let childPoints = [];\n        for(let point of map.getPoints()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                points.push(vector.getPointB());\n            }\n            //if rotation === 0\n            else\n                points.push(new Phaser.Geom.Point(point.x * container.scaleX + offset.x, point.y * container.scaleX + offset.y));\n\n            childPoints.push(points[points.length - 1])\n        }\n\n        //add child segments\n        for(let segment of map.getSegments()) {\n            //calculate positions after container's rotation\n            if(rotation !== 0) {\n                let pointA = segment.getPointA();\n                let pointB = segment.getPointB();\n                let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n                let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n                Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n                Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n\n                segments.push(new Phaser.Geom.Line(vectorA.getPointB().x, vectorA.getPointB().y, vectorB.getPointB().x, vectorB.getPointB().y));\n            }\n            //if rotation === 0\n            else\n                segments.push(new Phaser.Geom.Line(segment.getPointA().x * container.scaleX + offset.x, segment.getPointA().y * container.scaleY + offset.y, segment.getPointB().x * container.scaleX + offset.x, segment.getPointB().y * container.scaleY + offset.y));\n        }\n\n    }.bind(this));\n\n    //get children intersections\n    for(let i = 0, iLength = container.list.length; i < iLength; i++){\n        let childA = container.list[i];\n        let mapA = childA.data.get('raycasterMap');\n\n        for(let j = i+1, jLength = container.list.length; j < jLength; j++){\n            let childB = container.list[j];\n            let mapB = childB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(childA.getBounds(), childB.getBounds()))\n                continue;\n\n            //find objects intersections\n            for(let segmentA of mapA.getSegments()) {\n                for(let segmentB of mapB.getSegments()) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                     //calculate positions after container's rotation\n                    if(rotation !== 0) {\n                        let vector = new Phaser.Geom.Line(this.object.x, this.object.y, intersection.x * this.object.scaleX + offset.x, intersection.y * this.object.scaleY + offset.y);\n                        Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                        points.push(vector.getPointB());\n                    }\n                    //if rotation === 0\n                    else\n                        points.push(new Phaser.Geom.Point(intersection.x * container.scaleX + offset.x, intersection.y * container.scaleX + offset.y));\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/**\n * @classdesc\n *\n * Map class responsible for mapping game objects.\n *\n * @namespace Raycaster.Map\n * @class Raycaster.Map\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Map specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Map(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Map#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.9.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Mapped object's type\n    *\n    * @name Raycaster.Map#type\n    * @type {string}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.type;\n    /**\n    * If set true, map will be tested by ray. Otherwise it will be ignored.\n    *\n    * @name Raycaster.Map#active\n    * @type {boolean}\n    * @default true\n    * @since 0.7.2\n    */\n    this.active;\n    /**\n    * If set true, map will be automatically updated on scene update event.\n    *\n    * @name Raycaster.Map#dynamic\n    * @type {boolean}\n    * @default false\n    * @since 0.6.0\n    */\n    this.dynamic;\n    /**\n    * If set true, map will be treated by ray as circle. Set automaticalyy on map update.\n    *\n    * @name Raycaster.Map#circle\n    * @type {boolean}\n    * @default false\n    * @since 0.9.0\n    */\n    this.circle = false;\n    /**\n    * Reference to mapped object.\n    *\n    * @name Raycaster.Map#object\n    * @type {object}\n    * @readonly\n    * @since 0.6.0\n    */\n    this.object;\n    /**\n    * Array of mapped object's vertices used as rays targets.\n    *\n    * @name Raycaster.Map#_points\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._points = [];\n    /**\n    * Array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @name Raycaster.Map#_segments\n    * @type {array}\n    * @private\n    * @since 0.6.0\n    */\n    this._segments = [];\n    /**\n    * Get array of mapped object's vertices used as rays targets.\n    *\n    * @method Raycaster.Map#getPoints\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Point[]} Array of mapped object's vertices.\n    */\n    this.getPoints;\n    /**\n    * Get array of mapped object's segments used to test object's intersection with ray.\n    *\n    * @method Raycaster.Map#getSegments\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @param {Raycatser.Ray} [ray] - {@link Raycaster.Ray Raycaster.Ray} object used in some some types of maps.\n    *\n    * @return {Phaser.Geom.Line[]} Array of mapped object's segments.\n    */\n    this.getSegments;\n    /**\n    * Get mapped object's bounding box.\n    *\n    * @method Raycaster.Map#getBoundingBox\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.9.0\n    *\n    * @return {Phaser.Geom.Rectangle} Mapped object's bounding box.\n    */\n    this.getBoundingBox;\n    /**\n    * Update object's map of points and segments.\n    *\n    * @method Raycaster.Map#updateMap\n    * @memberof Raycaster.Map\n    * @instance\n    * @since 0.6.0\n    *\n    * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n    */\n    this.updateMap;\n\n    this.config(options);\n    this.updateMap();\n\n    return this;\n};\n\nMap.prototype = {\n    config: require('./config.js').config\n};\n\nMap.prototype.constructor = Map;\n","/*Map methods for lines*/\n/**\n* Get array of mapped line's vertices used as rays targets.\n*\n* @method Raycaster.Map#line.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped line's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#line.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update line's map of points and segments.\n*\n* @method Raycaster.Map#line.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    let pointA = this.object.geom.getPointA();\n    let pointB = this.object.geom.getPointB();\n\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        let vectorA = new Phaser.Geom.Line(this.object.x, this.object.y, pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorA, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorA) + rotation, Phaser.Geom.Line.Length(vectorA));\n        pointA = vectorA.getPointB();\n\n        let vectorB = new Phaser.Geom.Line(this.object.x, this.object.y, pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y);\n        Phaser.Geom.Line.SetToAngle(vectorB, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vectorB) + rotation, Phaser.Geom.Line.Length(vectorB));\n        pointB = vectorB.getPointB();\n\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x, pointA.y));\n        points.push(new Phaser.Geom.Point(pointB.x, pointB.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y));\n    }\n    //if rotation === 0\n    else {\n        //set points\n        points.push(new Phaser.Geom.Point(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y));\n        points.push(new Phaser.Geom.Point(pointB.x * this.object.scaleX + offset.x, pointB.y * this.object.scaleY + offset.y));\n        //set segment\n        segments.push(new Phaser.Geom.Line(pointA.x * this.object.scaleX + offset.x, pointA.y * this.object.scaleY + offset.y, pointB.x + offset.x * this.object.scaleX, pointB.y * this.object.scaleY + offset.y));\n    }\n    \n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n","/*Map methods for matter body*/\n/**\n* Get array of mapped matter body's vertices used as rays targets.\n*\n* @method Raycaster.Map#matterBody.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n\n    //calculate tangent rays\n    if(ray && !this.forceVerticesMapping && body.circleRadius > 0) {\n        let points = [];\n        let rayA = new Phaser.Geom.Line();\n        let rayB = new Phaser.Geom.Line();\n        let c = new Phaser.Geom.Line(ray.origin.x, ray.origin.y, body.position.x, body.position.y);\n\n        let rayLength = Math.sqrt(Math.pow(Phaser.Geom.Line.Length(c), 2) - Math.pow(body.circleRadius * body.scale.x, 2));\n\n        //ray angle\n        let angle = Phaser.Geom.Line.Angle(c);\n        let dAngle = Math.asin((body.circleRadius * body.scale.x) / Phaser.Geom.Line.Length(c));\n        Phaser.Geom.Line.SetToAngle(rayA, ray.origin.x, ray.origin.y, angle - dAngle, rayLength);\n        Phaser.Geom.Line.SetToAngle(rayB, ray.origin.x, ray.origin.y, angle + dAngle, rayLength);\n\n        //adding tangent points\n        points.push(rayA.getPointB());\n        points.push(rayB.getPointB());\n\n        return points;\n    }\n\n    return this._points;\n};\n\n/**\n* Get array of mapped matter body's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#matterBody.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update matter body's map of points and segments.\n*\n* @method Raycaster.Map#matterBody.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    let body = this.object.type === 'body' || this.object.type === 'composite' ? this.object : this.object.body;\n    let bodies = [body];\n    let generateBounds = false;\n\n    if(body.circleRadius > 0 && !this.forceVerticesMapping) {\n        this.circle = true;\n        this._points = points;\n        this._segments = segments;\n\n        return this;\n    }\n\n    this.circle = false;\n\n    if(body.type == 'composite')\n        bodies = body.bodies;\n\n    if( ( body.bounds === undefined && body.type == 'composite' ) || ( body.type == 'composite' && this.dynamic ) ) {\n        generateBounds = true;\n    }\n    \n    for(let bodyItem of bodies) {\n        //if convex body\n        if(bodyItem.parts.length === 1 || this.forceConvex) {\n            let vertices = bodyItem.parts[0].vertices;\n\n            points.push(new Phaser.Geom.Point(vertices[0].x, vertices[0].y));\n\n            for(let i = 1, length = vertices.length; i < length; i++) {\n                let pointA = new Phaser.Geom.Point(vertices[i - 1].x, vertices[i - 1].y);\n                let pointB = new Phaser.Geom.Point(vertices[i].x, vertices[i].y);\n\n                points.push(pointB);\n\n                //add segment\n                let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                segments.push(segment);\n            }\n\n            //closing segment\n            let segment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n            segments.push(segment);\n        }\n\n        //if concave body\n        else if(bodyItem.parts.length > 1) {\n            for(let i = 1, length = bodyItem.parts.length; i < length; i++) {\n                let vertices = bodyItem.parts[i].vertices;\n                let pointA = new Phaser.Geom.Point(vertices[0].x, vertices[0].y);\n\n                if(points.find(point => point.x == pointA.x && point.y == pointA.y) === undefined)\n                    points.push(pointA);\n\n                for(let j = 1, length = vertices.length; j < length; j++) {\n                    let pointB = new Phaser.Geom.Point(vertices[j].x, vertices[j].y);\n                    //check if segment was already added\n                    let segmentIndex = segments.findIndex(segment => (segment.x1 == pointA.x && segment.y1 == pointA.y && segment.x2 == pointB.x && segment.y2 == pointB.y) || (segment.x1 == pointB.x && segment.y1 == pointB.y && segment.x2 == pointA.x && segment.y2 == pointA.y));\n                    \n                    if(segmentIndex !== -1) {\n                        segments.splice(segmentIndex, 1);\n                        pointA = pointB;\n                        continue;\n                    }\n                    \n                    if(points.find(point => point.x == pointB.x && point.y == pointB.y) === undefined)\n                        points.push(pointB);\n\n                    //add segment\n                    let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n                    segments.push(segment);\n                    \n                    pointA = pointB;\n                }\n                \n                //closing segment\n                let closingSegment = new Phaser.Geom.Line(vertices[vertices.length - 1].x, vertices[vertices.length - 1].y, vertices[0].x, vertices[0].y);\n\n                let segmentIndex = segments.findIndex(segment => (segment.x1 == closingSegment.x1 && segment.y1 == closingSegment.y1 && segment.x2 == closingSegment.x2 && segment.y2 == closingSegment.y2) || (segment.x1 == closingSegment.x2 && segment.y1 == closingSegment.y2 && segment.x2 == closingSegment.x1 && segment.y2 == closingSegment.y1));\n                if(segmentIndex === undefined)\n                    segments.push(closingSegment);\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    if(generateBounds) {\n        let bounds = this._raycaster.scene.matter.composite.bounds(body);\n        body.bounds = bounds;\n    }\n\n    return this;\n};\n\n/**\n* Get matter body's bounding box.\n*\n* @method Raycaster.Map#matterBody.getBoundingBox\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.9.0\n*\n* @return {Phaser.Geom.Rectangle} - Matter body's bounding box.\n*/\nexport function getBoundingBox() {\n    let bounds = this.object.type === 'body' || this.object.type === 'composite' ? this.object.bounds : this.object.body.bounds;\n\n    return new Phaser.Geom.Rectangle(bounds.min.x, bounds.min.y, bounds.max.x - bounds.min.x, bounds.max.y - bounds.min.y);\n}\n\n","/*Map methods for polygons*/\n/**\n* Get array of mapped polygon's vertices used as rays targets.\n*\n* @method Raycaster.Map#polygon.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped polygon's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#polygon.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update polygon's map of points and segments.\n*\n* @method Raycaster.Map#polygon.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x - this.object.displayWidth * this.object.originX;\n    offset.y = this.object.y - this.object.displayHeight * this.object.originY;\n    //set points\n    //calculate positions after object's rotation\n    let rotation = this.object.rotation;\n    if(rotation !== 0) {\n        for(let point of this.object.geom.points) {\n            let vector = new Phaser.Geom.Line(this.object.x, this.object.y, point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y);\n            Phaser.Geom.Line.SetToAngle(vector, this.object.x, this.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n            points.push(vector.getPointB());\n        }\n    }\n    //if rotation === 0\n    else {\n        for(let point of this.object.geom.points) {\n            points.push(new Phaser.Geom.Point(point.x * this.object.scaleX + offset.x, point.y * this.object.scaleY + offset.y));\n        }\n    }\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n            segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));   \n    }\n    //if polygon is closed\n    if(this.object.closePath) {\n        let last = points.length - 1;\n        segments.push(new Phaser.Geom.Line(points[last].x, points[last].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for rectangles*/\n/**\n* Get array of mapped rectangle's vertices used as rays targets.\n*\n* @method Raycaster.Map#rectangle.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    return this._points;\n};\n\n/**\n* Get array of mapped rectangle's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#rectangle.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments() {\n    if(!this.active)\n        return [];\n    return this._segments;\n};\n\n/**\n* Update rectangle's map of points and segments.\n*\n* @method Raycaster.Map#rectangle.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.6.0\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n        \n    let points = [];\n    let segments = [];\n\n    //set points\n    points = [\n        this.object.getTopLeft(null, true),\n        this.object.getTopRight(null, true),\n        this.object.getBottomRight(null, true),\n        this.object.getBottomLeft(null, true)\n    ];\n\n    //set segments\n    for(let i = 0, length = points.length; i < length; i++) {\n        if(i+1 < length)\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\n        else\n        segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\n    }\n\n    this._points = points;\n    this._segments = segments;\n\n    return this;\n};\n","/*Map methods for tilemaps*/\n/**\n* Get array of mapped tilemap's vertices used as rays targets.\n*\n* @method Raycaster.Map#tilemap.getPoints\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Point[]} - Array of mapped object's vertices.\n*/\nexport function getPoints(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._points;\n\n    let points = [];\n    for(let point of this._points) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, point.x, point.y) <= ray.detectionRange)\n            points.push(point);\n    }\n\n    //get intersections between tilemap's segments and ray's detection range edge\n    let segments = this.getSegments(ray);\n\n    for(let segment of segments) {\n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x1, segment.y1) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x1, segment.y1));\n        \n        if(Phaser.Math.Distance.Between(ray.origin.x, ray.origin.y, segment.x2, segment.y2) > ray.detectionRange)\n            points.push(new Phaser.Geom.Point(segment.x2, segment.y2));\n    }\n\n    return points;\n};\n\n/**\n* Get array of mapped tilemap's segments used to test object's intersection with ray.\n*\n* @method Raycaster.Map#tilemap.getSegments\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @param {Raycatser.Ray} [ray] - {Raycaster.Ray} object used in some some types of maps.\n*\n* @return {Phaser.Geom.Line[]} - Array of mapped object's segments.\n*/\nexport function getSegments(ray = false) {\n    if(!this.active)\n        return [];\n    if(!ray || ray && (ray.detectionRange == 0 || ray.detectionRange >= Phaser.Math.MAX_SAFE_INTEGER))\n        return this._segments;\n\n    let segments = [];\n    for(let segment of this._segments) {\n        if(Phaser.Geom.Intersects.LineToCircle(segment, ray.detectionRangeCircle)) {\n            segments.push(segment);\n        }\n    }\n\n    return segments;\n};\n\n/**\n* Update tilemap's map of points and segments.\n*\n* @method Raycaster.Map#tilemap.updateMap\n* @memberof Raycaster.Map\n* @instance\n* @private\n* @since 0.7.3\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function updateMap() {\n    if(!this.active)\n        return this;\n\n    let points = [];\n    let segments = [];\n    \n    //calculate offset based on object position and origin point\n    let offset = new Phaser.Geom.Point();\n    offset.x = this.object.x;\n    offset.y = this.object.y;\n\n    let horizontal = false;\n    let horizontals = [];\n    let verticals = [];\n\n    //iterate rows\n    for(let i = 0, iLength = this.object.layer.data.length; i < iLength; i++) {\n        let row = this.object.layer.data[i];\n\n        //iterate row's tiles\n        for(let j = 0, jLength = row.length; j < jLength; j++) {\n            let tile = row[j];\n\n            //check if tile and its top and left neighbours have different are from different sets (rays blocking and non-bloking)\n            let upperEdge = ((i > 0 && this.collisionTiles.includes(this.object.layer.data[i-1][j].index) != this.collisionTiles.includes(tile.index)) || (i == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n            let leftEdge = ((j > 0 && this.collisionTiles.includes(this.object.layer.data[i][j-1].index) != this.collisionTiles.includes(tile.index)) || (j == 0 && this.collisionTiles.includes(tile.index))) ? true : false;\n\n            //get current tile's column last vertical line\n            let vertical = false;\n            if(verticals.length <= j)\n                verticals[j] = [];\n            else if(verticals[j].length > 0)\n                vertical = verticals[j][verticals[j].length - 1];\n\n            //check if tile has edge from left\n            if(leftEdge) {\n                if(vertical && vertical.y + vertical.height == i)\n                    vertical.height++;\n                else {\n                    verticals[j].push({\n                        x: tile.x,\n                        y: tile.y,\n                        height: 1\n                    });\n                }\n            }\n\n            //check if tile has edge from top\n            if(upperEdge) {\n                if(horizontal)\n                    horizontal.width++;\n                else\n                    horizontal = {\n                        x: tile.x,\n                        y: tile.y,\n                        width: 1\n                    };\n                continue;\n            }\n\n            if(horizontal) {\n                let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n                let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n                let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n                segments.push(segment);\n                horizontals.push(segment);\n                points.push(new Phaser.Geom.Point(x, y));\n                points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n                horizontal = false;\n            }\n        }\n        \n        //at the end of row add segment if exist\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add bottom horizontal segments\n    for(let tile of this.object.layer.data[this.object.layer.data.length - 1]) {\n        if(this.collisionTiles.includes(tile.index)) {\n            if(horizontal)\n                horizontal.width++;\n            else\n                horizontal = {\n                    x: tile.x,\n                    y: tile.y + 1,\n                    width: 1\n                };\n            continue;\n        }\n\n        if(horizontal) {\n            let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n            segments.push(segment);\n            horizontals.push(segment);\n            points.push(new Phaser.Geom.Point(x, y));\n            points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n            horizontal = false;\n        }\n    }\n\n    //add segment if exist\n    if(horizontal) {\n        let x = horizontal.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n        let y = horizontal.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n        let segment = new Phaser.Geom.Line(x, y, x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y);\n        segments.push(segment);\n        horizontals.push(segment);\n        points.push(new Phaser.Geom.Point(x, y));\n        points.push(new Phaser.Geom.Point(x + this.object.layer.tileWidth * this.object.scaleX * horizontal.width, y));\n        horizontal = false;\n    }\n    \n    //add right vertical segments\n    let vertical = false;\n    let verticalsLastColumn = [];\n    for(let row of this.object.layer.data) {\n        let tile = row[row.length - 1];\n\n        //if tile blocks ray\n        if(this.collisionTiles.includes(tile.index)) {\n            if(vertical) {\n                vertical.height++;\n            }\n            else {\n                vertical = {\n                    x: tile.x + 1,\n                    y: tile.y,\n                    height: 1\n                };\n            }\n\n            continue;\n        }\n\n        if(vertical) {\n            verticalsLastColumn.push(vertical);\n            vertical = false;\n        }\n    }\n\n    verticals.push(verticalsLastColumn);\n    \n    //add vertical segments\n    for(let column of verticals) {\n        if(!column)\n            continue;\n\n        for(let vertical of column) {\n            let x = vertical.x * this.object.layer.tileWidth * this.object.scaleX + offset.x;\n            let y1 = vertical.y * this.object.layer.tileHeight * this.object.scaleY + offset.y;\n            let y2 = y1 + this.object.layer.tileHeight * this.object.scaleY * vertical.height;\n            let segment = new Phaser.Geom.Line(x, y1, x, y2)\n            segments.push(segment);\n\n            //add points if they're not already there\n            if(!points.filter(point => point.x == x && point.y == y1))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            if(!points.filter(point => point.x == x && point.y == y2))\n                points.push(new Phaser.Geom.Point(x, y));\n\n            //get intersections between horizontal segments and vertical\n            for(let horizontalSegment of horizontals) {\n                if(segment.x1 == horizontalSegment.x1 || segment.x1 == horizontalSegment.x2 || segment.x2 == horizontalSegment.x1 || segment.x2 == horizontalSegment.x2)\n                    continue;\n\n                if(segment.y1 == horizontalSegment.y1 || segment.y1 == horizontalSegment.y2 || segment.y2 == horizontalSegment.y1 || segment.y2 == horizontalSegment.y2)\n                    continue;\n\n                let point = new Phaser.Geom.Point();\n                if(Phaser.Geom.Intersects.LineToLine(segment, horizontalSegment, point)) {\n                    points.push(point);\n                }\n            }\n        }\n    }\n\n    this._points = points;\n    this._segments = segments;\n    return this;\n};\n\n/**\n* Set tile types which should be mapped (for Phaser.Tilemaps.StaticTilemapLayer and Phaser.Tilemaps.DynamicTilemapLayer maps only).\n*\n* @method Raycaster.Map#setCollisionTiles\n* @memberof Raycaster.Map\n* @instance\n* @since 0.7.3\n*\n* @param {array} [tiles = []] - Set of tile's indexes to map.\n*\n* @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n*/\nexport function setCollisionTiles(tiles = []) {\n    this.collisionTiles = tiles;\n    return this;\n}\n","/**\n * Set segment count for cirle's map.\n * If set to 0, map won't be generating segments and relay only on tangent points calculated for currently testing ray.\n *\n * @method Raycaster.Map#setSegmentCount\n * @memberof Raycaster.Map\n * @instance\n * @since 0.6.0\n *\n * @param {integer} count - Circle map's segment count.\n *\n * @return {Raycaster.Map} {@link Raycaster.Map Raycaster.Map} instance\n */\nexport function setSegmentCount(count) {\n    this.segmentCount = count;\n    this.circle = count ? false : true;\n\n    this.updateMap();\n    return this;\n}\n","/**\n * Set ray's angle (direction) in radians.\n *\n * @method Raycaster.Ray#setAngle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {float} [angle = 0] - Ray's angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngle(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's angle (direction) in degrees.\n *\n * @method Raycaster.Ray#setAngleDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.1\n *\n * @param {float} [angle = 0] - Ray's angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setAngleDeg(angle = 0) {\n    this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(angle));\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n","/**\n * Cast ray to find closest intersection with tested mapped objects.\n *\n * @method Raycaster.Ray#cast\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = {Raycaster#mappedObjects}] - Array of game objects to test. If not provided test all mapped game objects.\n * @param {Phaser.Geom.Point} [options.target] - Ray's target point. Used in other casting methods to determine if ray was targeting mapped objects point.\n * @param {boolean} [options.internal = false] - Flag determining if method is used by other casting method.\n *\n * @return {(Phaser.Geom.Point|boolean)} Ray's closest intersection with tested objects. Returns false if no intersection has been found. Additionally contains reference to hit mapped object and segment if available.\n */\nexport function cast(options = {}) {\n    let closestIntersection;\n    let closestSegment;\n    let closestObject;\n    let closestDistance = this.rayRange;\n    let internal = options.internal ? options.internal : false;\n    let startTime = performance.now();\n    let stats = {\n        method: 'cast',\n        rays: 1,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if bounding box is defined check bounding box intersection\n    if(this._raycaster && this._raycaster.boundingBox) {\n        let intersections = [];\n        Phaser.Geom.Intersects.GetLineToRectangle(this._ray, this._raycaster.boundingBox.rectangle, intersections);\n        if(intersections.length === 1)\n            closestIntersection = intersections[0];\n        else if(intersections.length > 1) {\n            for(let intersection of intersections) {\n                let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                if(distance < closestDistance) {\n                    closestDistance = distance;\n                    closestIntersection = intersection;\n                }\n            }\n        }\n        //if ray target is declared\n        else if(options.target){\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, options.target.x, options.target.y);\n            //if target is within ray range\n            if(this.rayRange > distance) {\n                closestDistance = distance;\n                closestIntersection = options.target;\n            }\n        }\n    }\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n    \n    for(let object of options.objects) {\n        let map, boundingBox;\n        \n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        stats.testedMappedObjects++;\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        if(internal) {\n            boundingBox = map._boundingBox;\n        }\n        else {\n            boundingBox = map.getBoundingBox();\n            boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n        }\n\n        //check if object is intersected by ray\n        if(Phaser.Geom.Intersects.GetLineToRectangle(this._ray, boundingBox).length === 0)\n            continue;\n\n        stats.hitMappedObjects++;\n        stats.segments += map.getSegments(this).length;\n        \n        //check intersections\n        for(let segment of map.getSegments(this)) {\n            let intersection = [];\n\n            //if target point is segmemt point\n            if(options.target) {\n                if(\n                    Phaser.Geom.Point.Equals(options.target, segment.getPointA())\n                    || Phaser.Geom.Point.Equals(options.target, segment.getPointB())\n                ) {\n                    intersection = options.target;\n                }\n                else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n                    continue;\n            }\n            //if no intersection continue\n            else if(!Phaser.Geom.Intersects.LineToLine(this._ray, segment, intersection))\n              continue;\n            \n            //get closest intersection\n            let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n            if(distance < closestDistance) {\n                closestDistance = distance;\n                closestIntersection = intersection;\n                closestObject = map.object;\n                closestSegment = segment;\n            }\n        }\n\n        //check if map is circular\n        if(map.circle) {\n           //if circular map has generated points (besides tangent points to ray)\n            if(map._points.length > 0) {\n                continue;\n            }\n            \n            //check if target point is a circle tangent point to ray\n            if(options.target) {\n                let points = map.getPoints(this);\n                let isTangent = false;\n                for(let point of points) {\n\n                    if(Phaser.Geom.Point.Equals(options.target, point)) {\n                        //get closest intersection\n                        let distance = Phaser.Math.Distance.Between(this.origin.x, this.origin.y, point.x, point.y);\n\n                        if(distance < closestDistance) {\n                            closestDistance = distance;\n                            closestIntersection = point;\n                            closestObject = map.object;\n                            isTangent = true;\n                            break;\n                        }\n                    }\n                }\n\n                if(isTangent)\n                    continue;\n            }\n\n            let circleIntersections = [];\n            let offset = new Phaser.Geom.Point();\n            offset.x = map.object.x - map.object.displayWidth * (map.object.originX - 0.5);\n            offset.y = map.object.y - map.object.displayHeight * (map.object.originY - 0.5);\n\n            //calculate circle's center after rotation\n            let rotation = map.object.rotation;\n            if(rotation !== 0) {\n                let vector = new Phaser.Geom.Line(map.object.x, map.object.y, offset.x, offset.y);\n                Phaser.Geom.Line.SetToAngle(vector, map.object.x, map.object.y, Phaser.Geom.Line.Angle(vector) + rotation, Phaser.Geom.Line.Length(vector));\n                let cB = vector.getPointB();\n                offset.x = cB.x;\n                offset.y = cB.y;\n            }\n\n            //create transformed circle\n            let circle = new Phaser.Geom.Circle(offset.x, offset.y, map.object.radius * map.object.scaleX);\n\n            if(Phaser.Geom.Intersects.GetLineToCircle(this._ray, circle, circleIntersections)) {\n                for(let intersection of circleIntersections) {\n                    //get closest intersection\n                    let distance = Phaser.Math.Distance.Between(this._ray.x1, this._ray.y1, intersection.x, intersection.y);\n\n                    if(distance < closestDistance) {\n\n                        closestDistance = distance;\n                        closestIntersection = intersection;\n                        closestObject = map.object;\n                    }\n                }\n            }\n        }\n    }\n\n    //update stats\n    if(internal) {\n        this._stats.rays++;\n        this._stats.testedMappedObjects += stats.testedMappedObjects;\n        this._stats.hitMappedObjects += stats.hitMappedObjects;\n        this._stats.segments += stats.segments;\n    }\n    else {\n        stats.time = performance.now() - startTime;\n        this._stats = stats;\n    }\n\n    let result;\n    if(!closestIntersection) {\n        if(this.ignoreNotIntersectedRays)\n            return false;\n\n        result = this._ray.getPointB();\n    }\n    else {\n        result = new Phaser.Geom.Point(closestIntersection.x, closestIntersection.y);\n        result.segment = closestSegment;\n        result.object = closestObject;\n    }\n\n    if(this.round) {\n        result.x = Math.round(result.x);\n        result.y = Math.round(result.y);\n    }\n\n    if(!internal)\n        this.drawDebug([result]);\n    \n    return result;\n}\n","/**\n * Cast ray in all directions to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCircle\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCircle(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n            rayTargets.push({\n                point: point,\n                angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y)\n            });\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else {\n                mapB = objectB.data.get('raycasterMap');\n            }\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    \n                    rayTargets.push({\n                        point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                        angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y)\n                    });\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angle - b.angle;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n\n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            \n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice();\n\n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Cast ray in a cone to find closest intersections with tested mapped objects.\n *\n * @method Raycaster.Ray#castCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {object} [options] - options that may include:\n * @param {object[]} [options.objects = Raycaster.mappedObjects] - Array of game objects to test. If not provided test all mapped game objects.\n *\n * @return {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects. Additionally each point contains reference to hit mapped object and it's segment if available.\n */\nexport function castCone(options = {}) {\n    let originalAngle = this.angle;\n    let intersections = [];\n    let maps = [];\n    let rayTargets = [];\n    let testedObjects = [];\n    let cone = this.cone;\n    let minAngle = 0;\n    let maxAngle = 0;\n    let angleOffset = 0;\n    let startTime = performance.now();\n    //reset stats\n    this._stats = {\n        method: 'castCircle',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    //set cone\n    if(options.cone !== undefined)\n        cone = options.cone;\n    if(options.coneDeg !== undefined)\n        cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //set cone min and max angle\n    minAngle = this.angle - cone / 2;\n    maxAngle = this.angle + cone / 2;\n\n    //add min and max angle points\n    this.setAngle(minAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: minAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(-cone / 2)\n    });\n\n    this.setAngle(maxAngle);\n    rayTargets.push({\n        point: this._ray.getPointB(),\n        angle: maxAngle,\n        angleOffsetDeg: Phaser.Math.RadToDeg(cone / 2)\n    });\n\n    //if no objects to cast ray were passed, use raycasters mapped objects\n    if(!options.objects) {\n        if(this._raycaster)\n            options.objects = this._raycaster.mappedObjects;\n        else\n            return intersections;\n    }\n\n    //if bounding box is defined add bounding box points to \n    if(this._raycaster && this._raycaster.boundingBox) {\n        for(let point of this._raycaster.boundingBox.points) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: angle,\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n    }\n\n    for(let i=0, iLength = options.objects.length; i < iLength; i++) {\n        let object = options.objects[i];\n        //if bound in range\n        if(!this.boundsInRange(object))\n            continue;\n        \n        testedObjects.push(object);\n\n        let map, boundingBox;\n        if(object.type === 'body' || object.type === 'composite')\n            map = object.raycasterMap;\n        else\n            map = object.data.get('raycasterMap');\n\n        //get slightly enlarged bounding box due to fridge cases, when ray \"glanced\" border box's corner (v0.10.1)\n        boundingBox = map.getBoundingBox();\n        boundingBox.setTo(boundingBox.x - 0.1, boundingBox.y - 0.1, boundingBox.width + 0.2, boundingBox.height + 0.2);\n\n        map._boundingBox = boundingBox;\n\n        maps.push(map);\n        //get points and angles\n        for(let point of map.getPoints(this)) {\n\n            let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y);\n            let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n            if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                rayTargets.push({\n                    point: point,\n                    angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, point.x, point.y),\n                    angleOffsetDeg: -angleOffsetDeg\n                });\n            }\n        }\n\n        //get objects intersections\n        for(let j = i+1, jLength = options.objects.length; j < jLength; j++){\n            let objectB = options.objects[j];\n            let mapB;\n            if(objectB.type === 'body' || objectB.type === 'composite')\n                mapB = objectB.raycasterMap;\n            else\n                mapB = objectB.data.get('raycasterMap');\n            //check if bounding boxes overlap\n            if(!Phaser.Geom.Intersects.RectangleToRectangle(map.getBoundingBox(), mapB.getBoundingBox()))\n                continue;\n            \n            //find objects intersections\n            for(let segmentA of map.getSegments(this)) {\n                for(let segmentB of mapB.getSegments(this)) {\n                    let intersection = [];\n                    if(!Phaser.Geom.Intersects.LineToLine(segmentA, segmentB, intersection))\n                        continue;\n                    let angle = Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y);\n                    let angleOffsetDeg = Phaser.Math.Angle.ShortestBetween(Phaser.Math.RadToDeg(angle), Phaser.Math.RadToDeg(originalAngle));\n\n                    if(Math.abs(angleOffsetDeg) < Phaser.Math.RadToDeg(cone / 2)) {\n                        rayTargets.push({\n                            point: new Phaser.Geom.Point(intersection.x, intersection.y),\n                            angle: Phaser.Math.Angle.Between(this.origin.x, this.origin.y, intersection.x, intersection.y),\n                            angleOffsetDeg: -angleOffsetDeg\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    //sort target points by angle\n    rayTargets.sort(function(a, b){\n        //if rays towards points have the same angles promote closer one\n        if(a.angle == b.angle) {\n            if(Phaser.Math.Distance.Between(this.origin.x, this.origin.y, a.point.x, a.point.y) > Phaser.Math.Distance.Between(this.origin.x, this.origin.y, b.point.x, b.point.y))\n                return 1;\n            else\n                return -1;\n        }\n\n        return a.angleOffsetDeg - b.angleOffsetDeg;\n    }.bind(this));\n\n    let previousTarget = {\n        angle: false\n    };\n\n    //cast rays\n    for(let target of rayTargets){\n        //if current target is the same as previous one skip loop\n        if(target.angle === previousTarget.angle) {\n            continue;\n        }\n\n        previousTarget = target;\n        \n        this.setAngle(target.angle);\n        let intersection = this.cast({\n            objects: testedObjects,\n            target: target.point,\n            internal: true\n        });\n        if(intersection){\n            //if intersection hits target point cast two additional rays\n            let castSides = false;\n            if(this.round) {\n                let roundedTarget = new Phaser.Geom.Point(Math.round(target.point.x), Math.round(target.point.y));\n                castSides = Phaser.Geom.Point.Equals(roundedTarget, intersection)\n            }\n            else {\n                castSides = Phaser.Geom.Point.Equals(target.point, intersection);\n            }\n            if(castSides) {\n                this.setAngle(target.angle - 0.0001);\n                let intersectionA = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionA) {\n                    intersections.push(intersectionA);\n                }\n\n                intersections.push(intersection);\n\n                this.setAngle(target.angle + 0.0001);\n                let intersectionB = this.cast({\n                    objects: testedObjects,\n                    internal: true\n                });\n\n                if(intersectionB) {\n                    intersections.push(intersectionB);\n                }\n\n                continue;\n            }\n\n            intersections.push(intersection);\n        }\n    }\n\n    this.setAngle(originalAngle);\n    this.intersections = intersections;\n    if(this.autoSlice)\n        this.slicedIntersections = this.slice(intersections, false);\n    \n    this._stats.time = performance.now() - startTime;\n\n    this.drawDebug(intersections);\n\n    return intersections;\n}\n","/**\n * Set ray's cone angle (width) in radians.\n *\n * @method Raycaster.Ray#setCone\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in radians.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCone(cone = 0) {\n    this.cone = cone;\n    return this;\n}\n\n/**\n * Set ray's cone angle (width) in degrees.\n *\n * @method Raycaster.Ray#setConeDeg\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.7.0\n *\n * @param {float} [cone = 0] - Ray's cone angle in degrees.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setConeDeg(cone = 0) {\n    this.cone = Phaser.Math.DegToRad(cone);\n    return this;\n}\n","/**\n * Configure ray.\n *\n * @method Raycaster.Ray#config\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} [options] - Ray's congfiguration options. May include:\n * @param {Phaser.Geom.Point} [options.origin = {x:0, y:0}] - Ray's position.\n * @param {float} [options.angle = 0] - Ray's angle in radians.\n * @param {float} [options.angleDeg = 0] - Ray's angle in degrees.\n * @param {float} [options.cone = 0] - Ray's cone angle in radians.\n * @param {float} [options.coneDeg = 0] - Ray's cone angle in degrees.\n * @param {integer} [options.range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n * @param {integer} [options.collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's maximum collision range of ray's field of view.\n * @param {integer} [options.detectionRange = Phaser.Math.MAX_SAFE_INTEGER] - Maximum distance between ray's position and tested objects bounding boxes.\n * @param {boolean} [options.ignoreNotIntersectedRays = true] - If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n * @param {boolean} [options.autoSlice = false] - If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n * @param {boolean} [options.round = false] - If set true, point where ray hit will be rounded.\n * @param {(boolean|'arcade'|'matter')} [options.enablePhysics = false] - Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. If set true, arcade physics body will be added.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function config(options) {\n    this.object = options.object;\n    //origin\n    if(options.origin !== undefined)\n        this.origin.setTo(options.origin.x, options.origin.y);\n\n    //angle\n    if(options.angle !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(options.angle);\n\n    //angle deg\n    if(options.angleDeg !== undefined)\n        this.angle = Phaser.Math.Angle.Normalize(Phaser.Math.DegToRad(options.angleDeg));\n\n    //cone angle\n    if(options.cone !== undefined)\n        this.cone = options.cone;\n\n    //cone angle deg\n    if(options.coneDeg !== undefined)\n        this.cone = Phaser.Math.DegToRad(options.coneDeg);\n\n    //ray range (0 = max)\n    if(options.rayRange !== undefined)\n        this.rayRange = options.rayRange;\n\n    //collision range (0 = max)\n    if(options.collisionRange !== undefined)\n        this.collisionRange = options.collisionRange;\n\n    //detection range (0 = max)\n    if(options.detectionRange !== undefined)\n        this.detectionRange = options.detectionRange;\n\n    //ignore not intersected rays\n    if(options.ignoreNotIntersectedRays !== undefined)\n        this.ignoreNotIntersectedRays = (options.ignoreNotIntersectedRays == true)\n    \n    //round\n    if(options.round !== undefined)\n        this.round = (options.round == true)\n\n    //auto slice\n    if(options.autoSlice !== undefined)\n        this.autoSlice = (options.autoSlice == true)\n\n    //enable physics\n    if(options.enablePhysics !== undefined && options.enablePhysics)\n        this.enablePhysics(options.enablePhysics);\n    \n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this._raycaster.debugOptions.enabled && this._raycaster.scene !== undefined) {\n        this.graphics =  this._raycaster.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\n        this.graphics.setDepth(1000);\n    }\n\n    return this;\n}\n","/**\r\n * Draw rays in debug mode\r\n *\r\n * @method Raycaster.Ray#drawDebug\r\n * @memberof Raycaster\r\n * @private\r\n * @since 0.10\r\n * \r\n * @param {Phaser.Geom.Point[]} Array of points of ray's closest intersections with tested objects.\r\n * \r\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n */\r\nexport function drawDebug(intersections) {\r\n    if(this.graphics === undefined || !this._raycaster.debugOptions.enabled)\r\n        return this;\r\n\r\n    //clear\r\n    this.graphics.clear();\r\n\r\n    if(!this._raycaster.debugOptions.rays)\r\n        return this;\r\n    \r\n    if(this._raycaster.debugOptions.graphics.ray) {\r\n        this.graphics.lineStyle(1, this._raycaster.debugOptions.graphics.ray);\r\n\r\n        for(let intersection of intersections) {\r\n            this.graphics.strokeLineShape({\r\n                x1: this.origin.x,\r\n                y1: this.origin.y,\r\n                x2: intersection.x,\r\n                y2: intersection.y\r\n            });\r\n        }\r\n    }\r\n\r\n    if(this._raycaster.debugOptions.graphics.rayPoint) {\r\n        this.graphics.fillStyle(this._raycaster.debugOptions.graphics.rayPoint);\r\n\r\n        this.graphics.fillPoint(this.origin.x, this.origin.y, 3);\r\n        \r\n        for(let intersection of intersections) {\r\n            this.graphics.fillPoint(intersection.x, intersection.y, 3);\r\n        }\r\n    }\r\n\r\n    return this;\r\n}","/**\n * Add to ray physics body. Body will be a circle with radius equal to {@link Raycaster.Ray#collisionRange Ray.collisionRange}. Physics body can be added only once.\n *\n * @method Raycaster.Ray#enablePhysics\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {'arcade'|'matter'} [type = 'arcade'] - Physics type\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function enablePhysics(type = 'arcade') {\n    \n    if(this.body !== undefined)\n        return this;\n\n    this.collisionCircle = this._raycaster.scene.add.circle(this.origin.x, this.origin.y, this.collisionRange);\n    this.collisionCircle._ray = this;\n\n    if(type === 'matter') {\n        this.bodyType = 'matter';\n\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'rectangle', x:bounds.rectangle.centerX, y:bounds.rectangle.centerY, width:bounds.rectangle.width, height:bounds.rectangle.height }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n        else {\n            this._raycaster.scene.matter.add.gameObject(this.collisionCircle, { shape: { type: 'circle' }, label: 'phaser-raycaster-ray-body', isSensor: true, ignoreGravity:true });\n        }\n\n        this.body = this.collisionCircle.body;\n        this.body._ray = this;\n        this.setOnCollideActive();\n    }\n    else {\n        this.bodyType = 'arcade';\n        this._raycaster.scene.physics.add.existing(this.collisionCircle);\n\n        this.body = this.collisionCircle.body;\n        this.body\n            .setCircle(this.collisionRange)\n            .setAllowGravity(false)\n            .setImmovable(true);\n        this.body._ray = this;\n    }\n\n    return this;\n}\n","/*Matter physics methods for ray body*/\n/**\n * Sets the collision category of this ray's Matter Body. This number must be a power of two between 2^0 (= 1) and 2^31.\n * Two bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\n * categories are included in their collision masks (see {@link #setCollidesWith}).\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique category bitfield.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionCategory(value) {\n    this.body.collisionFilter.category = value;\n\n    return this;\n};\n\n/**\n * Sets the collision group of this ray's Matter Body. If this is zero or two Matter Bodies have different values,\n * they will collide according to the usual rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\n * If two Matter Bodies have the same positive value, they will always collide; if they have the same negative value,\n * they will never collide.\n *\n * @method Raycaster.Ray#setCollisionCategory\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {number} value - Unique group index.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionGroup(value) {\n    this.body.collisionFilter.group = value;\n\n    return this;\n};\n\n/**\n * Sets the collision mask for this ray's Matter Body. Two Matter Bodies with different collision groups will only\n * collide if each one includes the other's category in its mask based on a bitwise AND, i.e. `(categoryA & maskB) !== 0`\n * and `(categoryB & maskA) !== 0` are both true.*\n *\n * @method Raycaster.Ray#setCollidesWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\n\nexport function setCollidesWith(categories) {\n    var flags = 0;\n\n    if (!Array.isArray(categories))\n    {\n        flags = categories;\n    }\n    else\n    {\n        for (var i = 0; i < categories.length; i++)\n        {\n            flags |= categories[i];\n        }\n    }\n\n    this.body.collisionFilter.mask = flags;\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollide\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body starts colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollide(callback) {\n    let self = this;\n    this.body.onCollideCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(collisionInfo);\n        }\n    };\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideEnd\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke when this body stops colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideEnd(callback) {\n    this.body.onCollideEndCallback = function(collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            collisionInfo.rayCollided = false;\n            callback(collisionInfo);\n        }\n    }\n\n    return this;\n};\n\n/**\n * The callback is sent a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideActive\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {function} callback - The callback to invoke for the duration of this body colliding with another.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideActive(callback) {\n    let self = this;\n    let func = function(collisionInfo) {\n        if(self.processOverlap(collisionInfo)) {\n            let body = collisionInfo.bodyA.label === 'phaser-raycaster-ray-body' ? collisionInfo.bodyB : collisionInfo.bodyA;\n\n            if(collisionInfo.rayCollided !== true) {\n                collisionInfo.rayCollided = true;\n                if(self.body.onCollideCallback) {\n                    self.body.onCollideCallback(collisionInfo);\n                }\n\n                if(self.body.onCollideWith !== undefined && self.body.onCollideWith[body.id]) {\n                    self.body.onCollideWith[body.id](body, collisionInfo);\n                }\n            }\n            if(callback)\n                callback(collisionInfo);\n        }\n        else {\n            if(self.body.onCollideEndCallback && collisionInfo.rayCollided === true) {\n                self.body.onCollideEndCallback(collisionInfo);\n            }\n        }\n    }\n\n    this.body.onCollideActiveCallback = func;\n\n    return this;\n}\n\n/**\n * The callback is sent a reference to the other body, along with a `Phaser.Types.Physics.Matter.MatterCollisionData` object.\n * \n * This does not change the bodies collision category, group or filter. Those must be set in addition\n * to the callback.\n *\n * @method Raycaster.Ray#setOnCollideWith\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.9.1\n *\n * @param {(MatterJS.Body|MatterJS.Body[])} body - The body, or an array of bodies, to test for collisions with.\n * @param {function} callback - The callback to invoke when this body collides with the given body or bodies.\n * \n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOnCollideWith(body, callback) {\n    let self = this;\n    let func = function(body, collisionInfo) {\n        if(collisionInfo.rayCollided) {\n            callback(body, collisionInfo);\n        }\n        else if(self.processOverlap(collisionInfo)) {\n            collisionInfo.rayCollided = true;\n            callback(body, collisionInfo);\n        }\n    }\n\n    if (!Array.isArray(body))\n    {\n        body = [ body ];\n    }\n\n    for (var i = 0; i < body.length; i++)\n    {\n        var src = (body[i].hasOwnProperty('body')) ? body[i].body : body[i];\n\n        this.body.setOnCollideWith(src, func);\n    }\n\n    return this;\n};\n","/**\n * Set ray's source position.\n *\n * @method Raycaster.Ray#setOrigin\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setOrigin(x, y) {\n    this.origin.setTo(x, y);\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    if(this.bodyType === 'matter' && this.collisionRange !== Phaser.Math.MAX_SAFE_INTEGER) {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n    else if(this.bodyType === 'arcade') {\n        this.collisionCircle.x = x;\n        this.collisionCircle.y = y;\n    }\n\n    return this;\n}\n","/**\n * Get game objects overlaping field of view.\n *\n * @method Raycaster.Ray#overlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object|object[]} [objects] - Game object / array off game objects to test.\n *\n * @return {object[]} Array of game objects that overlaps with field of view.\n */\nexport function overlap(objects) {\n    let targets = [];\n    let overlapCircle = new Phaser.Geom.Circle(this.origin.x, this.origin.y, this.collisionRange);\n\n    //matter physics\n    if(this.bodyType === 'matter') {\n        let isCollisionInfo = false;\n        if(objects === undefined) {\n            objects = this._raycaster.scene.matter.query.collides(this.body, this._raycaster.scene.matter.getMatterBodies());\n\n            for(let object of objects) {   \n                let body = object.bodyA === this.body ? object.bodyB : object.bodyA;\n\n                if(this.testMatterOverlap(body))\n                    targets.push(body);\n            }\n        }\n        //get object's body\n        else {\n            if(!Array.isArray(objects))\n                objects = [objects];\n            \n            for(let object of objects) {\n                if(object === this.body)\n                    continue;\n    \n                if(this.testMatterOverlap(object))\n                    targets.push(object);\n            }\n        }\n    }\n    //arcade physics\n    else {\n        let bodies = false;\n        //get bodies in range\n        if(objects === undefined) {\n            objects = this._raycaster.scene.physics.overlapCirc(this.origin.x, this.origin.y, this.collisionRange, true, true);\n            bodies = true;\n        }\n        //get object's body\n        else if(!Array.isArray(objects)) {\n            objects = [objects];\n        }\n        //if objects are bodies\n        if(bodies) {\n            for(let body of objects) {\n                if(body === this.body)\n                    continue;\n            \n                let hitbox;\n                //get physics body hitbox\n                if(body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(body.position.x + body.halfWidth, body.position.y + body.halfWidth, body.halfWidth);\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(body.x, body.y, body.width, body.height);\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(body.gameObject);\n            }\n        }\n        //if objects are game objects\n        else {\n            for(let object of objects) {\n                if(object.body === undefined)\n                    continue;\n\n                let hitbox;\n                //get physics body hitbox\n                if(object.body.isCircle) {\n                    hitbox = new Phaser.Geom.Circle(object.body.position.x + object.body.halfWidth, object.body.position.y + object.body.halfWidth, object.body.halfWidth);\n                    if(!Phaser.Geom.Intersects.CircleToCircle(overlapCircle, hitbox))\n                        continue;\n                }\n                else {\n                    hitbox = new Phaser.Geom.Rectangle(object.body.x, object.body.y, object.body.width, object.body.height);\n                    if(!Phaser.Geom.Intersects.CircleToRectangle(overlapCircle, hitbox))\n                        continue;\n                }\n\n                if(this.testArcadeOverlap(hitbox))\n                    targets.push(object);\n            }\n        }\n    }\n\n    return targets;\n}\n\n/**\n * Process callback for physics collider / overlap.\n *\n * @method Raycaster.Ray#processOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {object} object1 - Game object or matter body passed by collider / overlap or matter CollisionInfo object.\n * @param {object} object2 - Game object or matter body passed by collider / overlap. Ignored if matter CollisionInfo object was passed as first argument.\n *\n * @return {boolean} Return true if game object is overlapping ray's field of view.\n */\nexport function processOverlap(object1, object2) {\n    let obj1, obj2, target;\n    //check if it's matter collisionInfo object\n    if(object1.bodyA !== undefined && object1.bodyB !== undefined) {\n        obj1 = object1.bodyA;\n        obj2 = object1.bodyB;\n    }\n    else {\n        obj1 = object1;\n        obj2 = object2;\n    }\n\n    if(obj1._ray !== undefined && obj1._ray === this)\n        target = obj2;\n    else if(obj2._ray !== undefined && obj2._ray === this)\n        target = obj1;\n    else\n        return false;\n\n    return (this.overlap(target).length > 0);\n}   \n\n/**\n * Test if hitbox overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testArcadeOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.8.0\n *\n * @param {object} hitbox - Game object's hitbox generated inside {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @return {boolean} True if hitbox overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testArcadeOverlap(hitbox) {\n    let overlap = false;\n\n    //iterate through field of view slices to check collisions with target\n    for(let slice of this.slicedIntersections) {\n        //if hitbox is a circle\n        if(hitbox.type == 0) {\n            overlap = Phaser.Geom.Intersects.TriangleToCircle(slice, hitbox);\n        }\n        //if hitbox is a rectangle\n        else {\n            overlap = Phaser.Geom.Intersects.RectangleToTriangle(hitbox, slice);\n        }\n\n        if(overlap) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Test if matter body overlaps with field of view. Method used in {@link Raycaster.Ray#overlap Ray.overlap}.\n *\n * @method Raycaster.Ray#testMatterOverlap\n * @memberof Raycaster.Ray\n * @instance\n * @private\n * @since 0.9.0\n *\n * @param {object} body - Matter body.\n *\n * @return {boolean} True if body overlaps with {@link Raycaster.Ray Raycaster.Ray} field of view.\n */\nexport function testMatterOverlap(object) {\n    let body;\n\n    if(object.type === 'body')\n        body = object;\n    else if(object.body !== undefined)\n        body = object.body;\n    else\n        return false;\n\n    //if body is concave, ignore convex body\n    let parts = body.parts.length > 1 ? body.parts.splice(1) : body.parts;\n    //iterate through bodies\n    for(let part of parts) {\n        let pointA = part.vertices[0];\n\n        for(let i = 1, length = part.vertices.length; i < length; i++) {\n            let pointB = part.vertices[i];\n            let segment = new Phaser.Geom.Line(pointA.x, pointA.y, pointB.x, pointB.y);\n\n            //iterate through field of view slices to check collisions with target\n            for(let slice of this.slicedIntersections) {\n                let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n                //additional checking if slice contain segment's points due to TriangleToLine bug.\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointA());\n                if(!overlap)\n                    overlap = Phaser.Geom.Triangle.ContainsPoint(slice, segment.getPointB());\n\n                if(overlap) {\n                    return true;\n                }\n            }\n            pointA = pointB;\n        }\n\n        //closing segment\n        let segment = new Phaser.Geom.Line(part.vertices[part.vertices.length - 1].x, part.vertices[part.vertices.length - 1].y, part.vertices[0].x, part.vertices[0].y);\n         //iterate through field of view slices to check collisions with target\n        for(let slice of this.slicedIntersections) {\n            let overlap = Phaser.Geom.Intersects.TriangleToLine(slice, segment);\n\n            if(overlap) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n","/**\n * Set ray's range.\n *\n * @method Raycaster.Ray#setRayRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [rayRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRayRange(rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.rayRange = rayRange;\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    return this;\n}\n\n/**\n * Set ray's maximum detection range. Objects outside detection range won't be tested.\n * Ray tests all objects when set to 0.\n *\n * @method Raycaster.Ray#setDetectionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} [detectionRange = 0] - Maximum distance between ray's position and tested objects bounding boxes.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setDetectionRange(detectionRange = 0) {\n    this.detectionRange = detectionRange;\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y,this.detectionRange);\n\n    return this;\n}\n\n/**\n * Set ray's field of view maximum collision range. Objects outside collision range won't be tested by {@link Raycaster.Ray#overlap Raycaster.Ray.overlap} method.\n * Determines ray's physics body radius.\n *\n * @method Raycaster.Ray#setCollisionRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {integer} [collisionRange = Phaser.Math.MAX_SAFE_INTEGER] - Ray's collision range and physics body radius.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setCollisionRange(collisionRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    let oldRangeMax = this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER;\n    this.collisionRange = collisionRange;\n    this.collisionCircle.setRadius(this.collisionRange);\n\n    if(this.bodyType === 'matter') {\n        if(this.collisionRange == Phaser.Math.MAX_SAFE_INTEGER) {\n            let bounds = this._raycaster.boundingBox;\n\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'rectangle',\n                    x: bounds.rectangle.centerX,\n                    y: bounds.rectangle.centerY,\n                    width: bounds.rectangle.width,\n                    height: bounds.rectangle.height,\n                    circleRadius:0\n                }\n            });\n        }\n        else if(oldRangeMax) {\n            this._raycaster.scene.matter.body.set(this.body, {\n                shape: {\n                    type: 'circle',\n                    x: this.collisionCircle.x,\n                    y: this.collisionCircle.y\n                },\n                circleRadius: this.collisionRange,\n                isStatic: false\n            });\n        }\n        else {\n            this.collisionCircle.setRadius(this.collisionRange);\n        }\n        this._raycaster.scene.matter.body.set(this.body, 'circleRadius', this.collisionRange)\n    }\n    else if(this.bodyType === 'arcade') {\n        this.body.setCircle(this.collisionRange);\n    }\n\n    return this;\n}\n\n/**\n * Test if object's bounding box is in ray's detection range.\n *\n * @method Raycaster.Ray#boundsInRange\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {object} object - Tested object\n * @param {(Phaser.Geom.Rectangle|boolean)} [bounds = false] - Tested object's bounds. If not passed bounds will be generated automatically.\n *\n * @return {boolean} Information if object is in ray's detection range.\n */\nexport function boundsInRange(object, bounds = false) {\n    if(!this.detectionRange)\n        return true;\n\n    let objectBounds;\n    if(bounds)\n        objectBounds = bounds;\n    else {\n        if(object.type === 'body' || object.type === 'composite')\n            objectBounds = object.raycasterMap.getBoundingBox();\n        else\n            objectBounds = object.data.get('raycasterMap').getBoundingBox();\n    }\n\n    if(Phaser.Geom.Intersects.CircleToRectangle(this.detectionRangeCircle, objectBounds))\n        return true;\n\n    return false;\n}\n","/**\n * @classdesc\n *\n * Ray class responsible for casting ray's and testing their collisions with mapped objects.\n *\n * @namespace Raycaster.Ray\n * @class Raycaster.Ray\n * @constructor\n * @since 6.0.0\n *\n * @param {object} options - Ray specific configuration settings.\n * @param {Raycaster} [raycaster] - Parent raycaster object.\n */\nexport function Ray(options, raycaster) {\n    /**\n    * Reference to parent Raycaster object.\n    *\n    * @name Raycaster.Ray#_raycaster\n    * @type {Raycaster}\n    * @private\n    * @since 0.6.0\n    */\n    this._raycaster = raycaster ? raycaster : false;\n    /**\n    * Ray's source position.\n    *\n    * @name Raycaster.Ray#origin\n    * @type {Phaser.Geom.Point}\n    * @since 0.6.0\n    */\n    this.origin = new Phaser.Geom.Point();\n    /**\n    * Ray's representation used to calculating intersections.\n    *\n    * @name Raycaster.Ray#_ray\n    * @type {Phaser.Geom.Line}\n    * @private\n    * @since 0.6.0\n    */\n    this._ray = new Phaser.Geom.Line();\n    /**\n    * Ray's angle in radians.\n    *\n    * @name Raycaster.Ray#angle\n    * @type {float}\n    * @default 0\n    * @since 0.6.0\n    */\n    this.angle = 0;\n    /**\n    * Ray's cone width angle in radians.\n    *\n    * @name Raycaster.Ray#cone\n    * @type {float}\n    * @default 0\n    * @since 0.7.0\n    */\n    this.cone = 0;\n    /**\n    * Ray's maximum range\n    *\n    * @name Raycaster.Ray#rayRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.6.0\n    */\n    this.rayRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * Ray's maximum detection range. Objects outside detection range won't be tested.\n    * Ray tests all objects when set to 0.\n    *\n    * @name Raycaster.Ray#detectionRange\n    * @type {integer}\n    * @default\n    * @since 0.6.0\n    */\n    this.detectionRange = 0;\n    /**\n    * Ray's representation of detection range used in calculating if objects are in range.\n    *\n    * @name Raycaster.Ray#detectionRangeCircle\n    * @type {Phaser.Geom.Circle}\n    * @private\n    * @since 0.6.0\n    */\n    this.detectionRangeCircle = new Phaser.Geom.Circle();\n    /**\n    * Ray's maximum collision range of ray's field of view. Radius of {@link Raycaster.Ray#collisionRangeCircle Ray.body}.\n    *\n    * @name Raycaster.Ray#collisionRange\n    * @type {integer}\n    * @default Phaser.Math.MAX_SAFE_INTEGER\n    * @since 0.8.0\n    */\n    this.collisionRange = Phaser.Math.MAX_SAFE_INTEGER;\n    /**\n    * If set true, ray returns false when it didn't hit anything. Otherwise returns ray's target position.\n    *\n    * @name Raycaster.Ray#ignoreNotIntersectedRays\n    * @type {boolean}\n    * @default true\n    * @since 0.6.0\n    */\n    this.ignoreNotIntersectedRays = true;\n    /**\n    * If set true, ray's hit points will be rounded.\n    *\n    * @name Raycaster.Ray#round\n    * @type {boolean}\n    * @default false\n    * @since 0.8.1\n    */\n    this.round = false;\n    /**\n    * If set true, ray will automatically slice intersections into array of triangles and store it in {@link Raycaster.Ray#slicedIntersections Ray.slicedIntersections}.\n    *\n    * @name Raycaster.Ray#autoSlice\n    * @type {boolean}\n    * @default false\n    * @since 0.8.0\n    */\n    this.autoSlice = false;\n    /**\n    * Array of intersections from last raycast representing field of view.\n    *\n    * @name Raycaster.Ray#intersections\n    * @type {object[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.intersections = [];\n    /**\n    * Array of triangles representing slices of field of view from last raycast.\n    *\n    * @name Raycaster.Ray#slicedIntersections\n    * @type {Phaser.Geom.Triangle[]}\n    * @default []\n    * @since 0.8.0\n    */\n    this.slicedIntersections = [];\n\n    /**\n    * Physics body for testing field of view collisions.\n    *\n    * @name Raycaster.Ray#body\n    * @type {object}\n    * @default undefined\n    * @since 0.8.0\n    */\n    //this.body = false;\n    /**\n    * Physics body type.\n    *\n    * @name Raycaster.Ray#bodyType\n    * @type {(bolean|'arcade'|'matter')}\n    * @default false\n    * @since 0.9.0\n    */\n    this.bodyType = false;\n\n    /**\n    * Ray casting stats.\n    *\n    * @name Raycaster.Ray#_stats\n    * @type {object}\n    * @private\n    * @since 0.10.0\n    * \n    * @property {string} method Used casting method (cast, castCircle, castCone).\n    * @property {number} rays Casted rays.\n    * @property {number} testedMappedObjects Tested mapped objects.\n    * @property {number} hitMappedObjects Hit mapped objects.\n    * @property {number} segments Tested segments.\n    * @property {number} time Casting time.\n    */\n    this._stats = {\n        method: 'cast',\n        rays: 0,\n        testedMappedObjects: 0,\n        hitMappedObjects: 0,\n        segments: 0,\n        time: 0\n    };\n\n    /**\n    * Ray's graphics object used for debug\n    *\n    * @name Raycaster.Ray#graphics\n    * @type {Phaser.GameObjects.Graphics}\n    * @private\n    * @since 0.10.0\n    */\n     this.graphics;\n\n    this.config(options);\n};\n\nRay.prototype = {\n    config: require('./config.js').config,\n    getStats: require('./stats.js').getStats,\n    setRay: require('./ray.js').setRay,    \n    setOrigin: require('./origin.js').setOrigin,\n    setRayRange: require('./range.js').setRayRange,\n    setAngle: require('./angle.js').setAngle,\n    setAngleDeg: require('./angle.js').setAngleDeg,\n    setCone: require('./cone.js').setCone,\n    setConeDeg: require('./cone.js').setConeDeg,\n    setDetectionRange: require('./range.js').setDetectionRange,\n    boundsInRange: require('./range.js').boundsInRange,\n    cast: require('./cast.js').cast,\n    castCircle: require('./castCircle.js').castCircle,\n    castCone: require('./castCone.js').castCone,\n    slice: require('./slice.js').slice,\n    setCollisionRange: require('./range.js').setCollisionRange,\n    enablePhysics: require('./enablePhysics.js').enablePhysics,\n    overlap: require('./overlap.js').overlap,\n    processOverlap: require('./overlap.js').processOverlap,\n    testArcadeOverlap: require('./overlap.js').testArcadeOverlap,\n    testMatterOverlap: require('./overlap.js').testMatterOverlap,\n    setCollisionCategory: require('./matter-physics-methods.js').setCollisionCategory,\n    setCollisionGroup: require('./matter-physics-methods.js').setCollisionGroup,\n    setCollidesWith: require('./matter-physics-methods.js').setCollidesWith,\n    setOnCollide: require('./matter-physics-methods.js').setOnCollide,\n    setOnCollideEnd: require('./matter-physics-methods.js').setOnCollideEnd,\n    setOnCollideActive: require('./matter-physics-methods.js').setOnCollideActive,\n    setOnCollideWith: require('./matter-physics-methods.js').setOnCollideWith,\n    drawDebug: require('./debug.js').drawDebug\n};\n","/**\n * Set ray's position, direction (angle) and range.\n *\n * @method Raycaster.Ray#setRay\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.6.0\n *\n * @param {integer} x - X coordinate.\n * @param {integer} y - Y coordinate.\n * @param {float} [angle] - Ray's angle in radians.\n * @param {integer} [range = Phaser.Math.MAX_SAFE_INTEGER] - Ray's range.\n *\n * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\n */\nexport function setRay(x, y, angle, rayRange = Phaser.Math.MAX_SAFE_INTEGER) {\n    this.origin.setTo(x, y);\n    this.angle = Phaser.Math.Angle.Normalize(angle);\n    this.rayRange = rayRange;\n\n    Phaser.Geom.Line.SetToAngle(this._ray, this.origin.x, this.origin.y, this.angle, this.rayRange);\n    this.detectionRangeCircle.setTo(this.origin.x, this.origin.y, this.detectionRange);\n    return this;\n}\n","/**\n * Slice ray's field of view represented by polygon or array of points into array of triangles.\n *\n * @method Raycaster.Ray#slice\n * @memberof Raycaster.Ray\n * @instance\n * @since 0.8.0\n *\n * @param {(object[]|Phaser.Geom.Polygon)} [fov = {Ray#fov}] - Array of points or polygon representing field of view. If not passed, filed of view from last raycaste will be used.\n * @param {boolean} [closed = true|{Ray#fov}] - Define if field of view polygon is closed (first and last vertices sholud be connected). If fov was not passed, value depends of last type of casting.\n *\n * @return {Phaser.Geom.Triangle[]} Array of triangles representing slices of field of view.\n */\nexport function slice(intersections = this.intersections, closed = true) {\n    //if intersections is Phaser.Geom.Polygon object\n    if(!Array.isArray(intersections)) {\n        if(intersections.type === 4)\n            intersections = intersections.points;\n        else\n            return [];\n    }\n\n    if(intersections.length === 0)\n        return [];\n\n    let slices = [];\n    for(let i = 0, iLength = intersections.length - 1; i < iLength; i++) {\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[i].x, intersections[i].y, intersections[i+1].x, intersections[i+1].y));\n    }\n\n    if(closed)\n        slices.push(new Phaser.Geom.Triangle(this.origin.x, this.origin.y, intersections[0].x, intersections[0].y, intersections[intersections.length-1].x, intersections[intersections.length-1].y));\n\n    return slices;\n}\n","/**\r\n * Get ray statistics for last casting. Stats include\r\n * * number of casted rays,\r\n * * number of tested mapped objects,\r\n * * number of tested map segments.\r\n * * casting time\r\n *\r\n * @method Raycaster.Ray#getStats\r\n * @memberof Raycaster.Ray\r\n * @instance\r\n * @since 0.10.0\r\n *\r\n * @return {object} Statisticss from last casting.\r\n */\r\n export function getStats() {\r\n     return this._stats;\r\n }\r\n","/**\r\n* @author       Marcin Walczak <contact@marcin-walczak.pl>\r\n* @copyright    2021 Marcin Walczak\r\n* @license      {@link https://github.com/wiserim/phaser-raycaster/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\n/**\r\n * @classdesc\r\n *\r\n * Raycaster class responsible for creating ray objects and managing mapped objects.\r\n * \r\n * @namespace Raycaster\r\n * @class Raycaster\r\n * @constructor\r\n * @since 6.0.0\r\n *\r\n * @param {object} [options] - Raycaster's configuration options. May include:\r\n * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps. If set to 0, map will be teste\r\n * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n * @param {boolean} [options.autoUpdate = true] - If set true, automatically update dynamic maps on scene update event.\r\n * @param {bool|object} [options.debug] - Enable debug mode or configure it {@link Raycaster#debugOptions debugOptions}.\r\n */\r\nexport function Raycaster(options) {\r\n    /**\r\n    * Plugin version.\r\n    *\r\n    * @name Raycaster#version\r\n    * @type {string}\r\n    * @readonly\r\n    * @since 0.6.0\r\n    */\r\n    this.version = '0.10.2';\r\n    /**\r\n    * Raycaster's scene\r\n    *\r\n    * @name Raycaster#scene\r\n    * @type {Phaser.Scene}\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.scene;\r\n    /**\r\n    * Raycaster's graphics object used for debug\r\n    *\r\n    * @name Raycaster#graphics\r\n    * @type {Phaser.GameObjects.Graphics}\r\n    * @private\r\n    * @since 0.10.0\r\n    */\r\n    this.graphics;\r\n    /**\r\n    * Raycaster's debug config\r\n    *\r\n    * @name Raycaster#debugOptions\r\n    * @type {Object}\r\n    * @since 0.10.0\r\n    * \r\n    * @property {bool} [enable = false] Enable debug mode\r\n    * @property {bool} [maps = true] - Enable maps debug\r\n    * @param {bool} [rays = true] - Enable rays debug\r\n    * @property {bool} graphics - Debug graphics options\r\n    * @property {bool|number} [graphics.ray = 0x00ff00] - Debug ray color. Set false to disable.\r\n    * @property {bool|number} [graphics.rayPoint = 0xff00ff] - Debug ray point color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapPoint = 0x00ffff] - debug map point color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapSegment = 0x0000ff] - Debug map segment color. Set false to disable.\r\n    * @property {bool|number} [graphics.mapBoundingBox = 0xff0000] - Debug map bounding box color. Set false to disable.\r\n    */\r\n    this.debugOptions = {\r\n        enabled: false,\r\n        maps: true,\r\n        rays: true,\r\n        graphics: {\r\n            ray: 0x00ff00,\r\n            rayPoint: 0xff00ff,\r\n            mapPoint: 0x00ffff,\r\n            mapSegment: 0x0000ff,\r\n            mapBoundingBox: 0xff0000\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Raycaster statistics.\r\n    *\r\n    * @name Raycaster.Raycaster#_stats\r\n    * @type {object}\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @property {object} mappedObjects Mapped objects statistics.\r\n    * @property {number} mappedObjects.total Mapped objects total.\r\n    * @property {number} mappedObjects.static Static maps.\r\n    * @property {number} mappedObjects.dynamic Dynamic maps.\r\n    * @property {number} mappedObjects.rectangleMaps Rectangle maps.\r\n    * @property {number} mappedObjects.polygonMaps Polygon maps.\r\n    * @property {number} mappedObjects.circleMaps Circle maps.\r\n    * @property {number} mappedObjects.lineMaps Line maps.\r\n    * @property {number} mappedObjects.containerMaps Container maps.\r\n    * @property {number} mappedObjects.tilemapMaps Tilemap maps.\r\n    * @property {number} mappedObjects.matterMaps Matter body maps.\r\n    */\r\n     this._stats = {\r\n        mappedObjects: {\r\n            total: 0,\r\n            static: 0,\r\n            dynamic: 0,\r\n            rectangleMaps: 0,\r\n            polygonMaps: 0,\r\n            circleMaps: 0,\r\n            lineMaps: 0,\r\n            containerMaps: 0,\r\n            tilemapMaps: 0,\r\n            matterMaps: 0\r\n        }\r\n     };\r\n\r\n    /**\r\n    * Raycaster's bounding box.\r\n    *\r\n    * @name Raycaster#boundingBox\r\n    * @type {Phaser.Geom.Rectangle}\r\n    * @default false\r\n    * @private\r\n    * @since 0.6.0\r\n    */\r\n    this.boundingBox = false;\r\n    /**\r\n    * Array of mapped game objects.\r\n    *\r\n    * @name Raycaster#mappedObjects\r\n    * @type {object[]}\r\n    * @since 0.6.0\r\n    */\r\n    this.mappedObjects = [];\r\n    this.sortedPoints = [];\r\n    /**\r\n    * Number of segments of circle maps.\r\n    *\r\n    * @name Raycaster#mapSegmentCount\r\n    * @type {integer}\r\n    * @default 0\r\n    * @since 0.6.0\r\n    */\r\n    this.mapSegmentCount = 0;\r\n\r\n    if(options !== undefined) {\r\n        if(options.boundingBox === undefined && options.scene !== undefined) {\r\n            if(options.scene.physics !== undefined)\r\n                options.boundingBox = options.scene.physics.world.bounds;\r\n            else if(options.scene.matter !== undefined) {\r\n                let walls = options.scene.matter.world.walls;\r\n\r\n                if(walls.top !== null) {\r\n                    options.boundingBox = new Phaser.Geom.Rectangle(\r\n                        walls.top.vertices[3].x,\r\n                        walls.top.vertices[3].y,\r\n                        walls.bottom.vertices[1].x - walls.top.vertices[3].x,\r\n                        walls.bottom.vertices[1].y - walls.top.vertices[3].y\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setOptions(options);\r\n\r\n        if(options.autoUpdate === undefined || options.autoUpdate)\r\n            //automatically update event\r\n            this.scene.events.on('update', this.update.bind(this));\r\n    }\r\n    else\r\n        //automatically update event\r\n        this.scene.events.on('update', this.update.bind(this));\r\n\r\n    return this;\r\n}\r\n\r\nRaycaster.prototype = {\r\n    /**\r\n    * Configure raycaster.\r\n    *\r\n    * @method Raycaster#setOptions\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Raycaster's congfiguration options. May include:\r\n    * @param {Phaser.Scene} [options.scene] - Scene in which Raycaster will be used.\r\n    * @param {integer} [options.mapSegmentCount = 0] - Number of segments of circle maps.\r\n    * @param {(object|object[])} [options.objects] - Game object or array of game objects to map.\r\n    * @param {Phaser.Geom.Rectangle} [options.boundingBox] - Raycaster's bounding box.\r\n    * @param {bool|object} [options.debug] - Enable debug mode or cofigure {@link Raycaster#debugOptions debugOptions}.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setOptions: function(options) {\r\n        if(options.scene !== undefined) {\r\n            this.scene = options.scene;\r\n            this.graphics =  this.scene.add.graphics({ lineStyle: { width: 1, color: 0x00ff00}, fillStyle: { color: 0xff00ff } });\r\n            this.graphics.setDepth(999);\r\n        }\r\n\r\n        if(options.debug !== undefined && options.debug !== false) {\r\n            this.debugOptions.enabled = true;\r\n\r\n            if(typeof options.debug === 'object')\r\n                Object.assign(this.debugOptions, options.debug);\r\n        }\r\n            \r\n\r\n        if(options.mapSegmentCount !== undefined)\r\n            this.mapSegmentCount = options.mapSegmentCount;\r\n\r\n        if(options.objects !== undefined)\r\n            this.mapGameObjects(options.objects);\r\n\r\n        if(options.boundingBox !== undefined)\r\n            this.setBoundingBox(options.boundingBox.x, options.boundingBox.y, options.boundingBox.width, options.boundingBox.height)\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Set Raycatser's bounding box.\r\n    *\r\n    * @method Raycaster#setBoundingBox\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {integer} x - The X coordinate of the top left corner of bounding box.\r\n    * @param {integer} y - The Y coordinate of the top left corner of bounding box.\r\n    * @param {integer} width - The width of bounding box.\r\n    * @param {integer} height - The height of bounding box.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    setBoundingBox: function(x, y, width, height) {\r\n        this.boundingBox = {\r\n            rectangle: new Phaser.Geom.Rectangle(x, y, width, height),\r\n            points: [],\r\n            segments: []\r\n        }\r\n        //set points\r\n        let points = [\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.top),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.right, this.boundingBox.rectangle.bottom),\r\n            new Phaser.Geom.Point(this.boundingBox.rectangle.left, this.boundingBox.rectangle.bottom)\r\n        ];\r\n\r\n        this.boundingBox.points = points;\r\n\r\n        //set segments\r\n        for(let i = 0, length = this.boundingBox.points.length; i < length; i++) {\r\n            if(i+1 < length)\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[i+1].x, points[i+1].y));\r\n            else\r\n            this.boundingBox.segments.push(new Phaser.Geom.Line(points[i].x, points[i].y, points[0].x, points[0].y));\r\n        }\r\n    },\r\n\r\n    /**\r\n    * Map game objects\r\n    *\r\n    * @method Raycaster#mapGameObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object|object[]} objects - Game object / matter body or array of game objects / matter bodies to map.\r\n    * @param {boolean} [dynamic = false] - {@link Raycaster.Map Raycaster.Map} dynamic flag (determines map will be updated automatically).\r\n    * @param {object} [options] - Additional options for {@link Raycaster.Map Raycaster.Map}\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    mapGameObjects: function(objects, dynamic = false, options = {}) {\r\n        options.dynamic = dynamic;\r\n        options.segmentCount = (options.segmentCount !== undefined) ? options.segmentCount : this.segmentCount;\r\n\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            if(this.mappedObjects.includes(object))\r\n                continue;\r\n\r\n            let config = {};\r\n            for(let option in options) {\r\n                config[option] = options[option];\r\n            }\r\n            config.object = object;\r\n            \r\n            let map = new this.Map(config, this);\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                object.raycasterMap = map;\r\n            }\r\n            else if(!object.data) {\r\n                object.setDataEnabled();\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n            else {\r\n                object.data.set('raycasterMap', map);\r\n            }\r\n\r\n            this.mappedObjects.push(object);\r\n\r\n            //update stats\r\n            if(object.dynamic)\r\n                this._stats.mappedObjects.dynamic++;\r\n            else\r\n                this._stats.mappedObjects.static++;\r\n            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps++;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps++;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps++;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps++;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps++;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps++;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps++;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Remove game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#removeMappedObjects\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be removed.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    removeMappedObjects: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n\r\n        for(let object of objects) {\r\n            let index = this.mappedObjects.indexOf(object);\r\n            if(index >= 0)\r\n                this.mappedObjects.splice(index, 1);\r\n            \r\n            //update stats\r\n            if(object.dynamic)\r\n                this._stats.mappedObjects.dynamic--;\r\n            else\r\n                this._stats.mappedObjects.static--;\r\n            \r\n            switch(object.type) {\r\n                case 'Polygon':\r\n                    this._stats.mappedObjects.polygonMaps--;\r\n                    break;\r\n                case 'Arc':\r\n                    this._stats.mappedObjects.circleMaps--;\r\n                    break;\r\n                case 'Line':\r\n                    this._stats.mappedObjects.lineMaps--;\r\n                    break;\r\n                case 'Container':\r\n                    this._stats.mappedObjects.containerMaps--;\r\n                    break;\r\n                case 'StaticTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'DynamicTilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'TilemapLayer':\r\n                    this._stats.mappedObjects.tilemapMaps--;\r\n                    break;\r\n                case 'MatterBody':\r\n                    this._stats.mappedObjects.matterMaps--;\r\n                    break;\r\n                default:\r\n                    this._stats.mappedObjects.rectangleMaps--;\r\n            }\r\n        }\r\n\r\n        this._stats.mappedObjects.total = this.mappedObjects.length;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Enable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#enableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be enabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    enableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Disable game object's {@link Raycaster.Map Raycaster.Map} maps.\r\n    *\r\n    * @method Raycaster#disableMaps\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.7.2\r\n    *\r\n    * @param {(object|object[])} objects - Game object or array of game objects which maps will be disabled.\r\n    *\r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    disableMaps: function(objects) {\r\n        if(!Array.isArray(objects))\r\n            objects = [objects];\r\n        \r\n        for(let object of objects) {\r\n            let map;\r\n\r\n            if(object.type === 'body' || object.type === 'composite') {\r\n                map = object.raycasterMap;\r\n            }\r\n            else if(object.data) {\r\n                map = object.data.get('raycasterMap');\r\n            }\r\n\r\n            if(map)\r\n                map.active = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Updates all {@link Raycaster.Map Raycaster.Map} dynamic maps. Fired on Phaser.Scene update event.\r\n    *\r\n    * @method Raycaster#update\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n    update: function() {\r\n        //update dynamic maps\r\n        let dynamicMaps = 0;\r\n        if(this.mappedObjects.length > 0) {\r\n            for(let mapppedObject of this.mappedObjects) {\r\n                let map;\r\n\r\n                if(mapppedObject.type === 'body' || mapppedObject.type === 'composite') {\r\n                    map = mapppedObject.raycasterMap;\r\n                }\r\n                else if(mapppedObject.data) {\r\n                    map = mapppedObject.data.get('raycasterMap');\r\n                }\r\n\r\n                if(!map)\r\n                    continue;\r\n\r\n                if(map.dynamic) {\r\n                    map.updateMap();\r\n                    dynamicMaps++;\r\n                }\r\n            }\r\n\r\n            //update stats\r\n            this._stats.mappedObjects.static = this.mappedObjects.length - dynamicMaps;\r\n            this._stats.mappedObjects.dynamic = dynamicMaps;\r\n\r\n            //debug\r\n            if(this.debugOptions.enabled)\r\n                this.drawDebug();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n    * Create {@link Raycaster.Ray Raycaster.Ray} object.\r\n    *\r\n    * @method Raycaster#createRay\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.6.0\r\n    *\r\n    * @param {object} [options] - Ray options:\r\n    *\r\n    * @return {Raycaster.Ray} {@link Raycaster.Ray Raycaster.Ray} instance\r\n    */\r\n    createRay: function(options = {}) {\r\n        return new this.Ray(options, this);\r\n    },\r\n\r\n    /**\r\n    * Get raycaster statistics.\r\n    *\r\n    * @method Raycaster#getStats\r\n    * @memberof Raycaster\r\n    * @instance\r\n    * @since 0.10.0\r\n    *\r\n    * @return {object} Raycaster statistics.\r\n    */\r\n    getStats: function() {\r\n        return this._stats;\r\n    },\r\n\r\n    /**\r\n    * Draw maps in debug mode\r\n    *\r\n    * @method Raycaster#drawDebug\r\n    * @memberof Raycaster\r\n    * @private\r\n    * @since 0.10.0\r\n    * \r\n    * @return {Raycaster} {@link Raycaster Raycaster} instance\r\n    */\r\n     drawDebug: function() {\r\n        if(this.graphics === undefined || !this.debugOptions.enabled)\r\n            return this;\r\n\r\n        //clear\r\n        this.graphics.clear();\r\n\r\n        if(!this.debugOptions.maps)\r\n            return this;\r\n\r\n        for(let object of this.mappedObjects)\r\n        {\r\n            let map;\r\n        \r\n            if(object.type === 'body' || object.type === 'composite')\r\n                map = object.raycasterMap;\r\n            else\r\n                map = object.data.get('raycasterMap');\r\n            \r\n            if(!map)\r\n                continue;\r\n\r\n            //draw bounding box\r\n            if(this.debugOptions.graphics.mapBoundingBox) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapBoundingBox);\r\n                this.graphics.strokeRectShape(map.getBoundingBox());\r\n            }\r\n\r\n            //draw segments\r\n            if(this.debugOptions.graphics.mapSegment) {\r\n                this.graphics.lineStyle(1, this.debugOptions.graphics.mapSegment);\r\n                for(let segment of map.getSegments()) {\r\n                    this.graphics.strokeLineShape(segment);\r\n                }\r\n            }\r\n\r\n            //draw points\r\n            if(this.debugOptions.graphics.mapPoint) {\r\n                this.graphics.fillStyle(this.debugOptions.graphics.mapPoint);\r\n                for(let point of map.getPoints()) {\r\n                    this.graphics.fillPoint(point.x, point.y, 3)\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nRaycaster.prototype.Map = require('./map/map-core.js').Map;\r\nRaycaster.prototype.Ray = require('./ray/ray-core.js').Ray;\r\n"],"sourceRoot":""}